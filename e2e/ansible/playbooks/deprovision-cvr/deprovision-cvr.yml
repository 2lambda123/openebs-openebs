---
- hosts: localhost

  vars_files:
    - cvr-vars.yml

  tasks:
   - block:

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         changed_when: true

       - name: Copy patch files to master.
         include_tasks: "{{utils_path}}/copy_task.yml"
         vars:
           destination_node: "{{groups['kubernetes-kubemasters'].0}}"
         files_to_copy: "{{ patch_file }}"

       - name: Get the list available cvr.
         shell: source ~/.profile; kubectl get cvr -n {{ operator_ns }} --no-headers
         args:
           executable: /bin/bash
         register: cvr_list
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Patch the cvr 
         shell: source ~/.profile; kubectl patch cvr {{ item.split()[0] }} -n {{ operator_ns }} --type merge --patch "$(cat {{ patch_file }})"
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         with_items:
             - "{{ cvr_list.stdout_lines }}"

       - name: Delete the available cvr
         shell: kubectl delete cvr {{ item.split()[0] }} -n {{ operator_ns }} 
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         with_items:
             - "{{ cvr_list.stdout_lines }}"
         ignore_errors: true

       - name: Check if the cvr is deleted
         shell: kubectl get cvr -n {{ operator_ns }}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: 'result.rc !=0'
