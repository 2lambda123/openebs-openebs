# Description: Deploying OpenEBS and Percona application with its own Namespaces.
# Author: Swarna

########################################################################################
# Test Steps:
#1.Check the maya-apiserver is running already, if it running delete the openebs-operator.
#2.Copy Test artifacts to kubemaster.
#3.Deploy OpenEBS with its own namespace and check the pod status
#4.Replace PVC name with test case name in percona yaml and deploy with its own namespace
#5.Get the IP address of percona pod.
#6.Install mysql-client package to write data on percona mysql.
#7.Write the data in percona mysql.
##########################################################################################

- hosts: localhost

  vars_files:
    - openebs-ns-vars.yml

  tasks:

   - block:

       - include: pre-requisites.yml

       - name: Check status of maya-apiserver
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: "{{ operator_ns }}"
           lkey: name
           lvalue: maya-apiserver

       - name: Creating  percona namespace to deploy percona application
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"

       - name: Get percona spec
         get_url:
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace volume-claim name with test parameters
         include_tasks: "{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/demo-percona-mysql-pvc.yaml"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"

       - name: Create percona deployment with OpenEBS storage
         include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ percona_file }}"
           ns: "{{namespace}}"

       - name: Check percona pod is running
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: "{{namespace}}"
           lkey: name
           lvalue: percona

       - name: Get IP address of percona mysql pod
         shell: source ~/.profile; kubectl get pod percona -n {{ namespace }} -o wide --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_IP

       - name: Set IP of Pod to variable
         set_fact:
           pod_ip: "{{ result_IP.stdout.split()[5] }}"

       - name: Run apt-get update via shell
         shell: apt-get update
         become: true
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         ignore_errors: true
         tags:
           - skip_ansible_lint

       - name: Install mysql-client on K8S-master
         shell: apt-get install -y mysql-client
         become: true
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         tags:
           - skip_ansible_lint

       - name: Write a test database into percona mysql
         shell: |
           sleep 120
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create database tdb;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create table ttbl (Data VARCHAR(20));" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "insert into ttbl (Data) VALUES ('tdata');" tdb
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Testing the database tables on percona mysql
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "show databases;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "select * from ttbl;" tdb
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"


       - name: Setting pass flag
         set_fact:
            flag: "Test Passed"
            status: "good"
            status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
       - block:

           - include: k8s-percona-openebs-pod-cleanup.yml
             when: clean | bool

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"