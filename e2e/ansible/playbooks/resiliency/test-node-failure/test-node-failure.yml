# Description: Verify the node failure resilency on OpenEBS volumes.
# Author: Swarna

########################################################################################
# Test Steps:
#1.Check the maya-apiserver is running.
#2.Download and Copy Test artifacts to kubemaster.
#3.Replace PVC name with test case name in percona yaml
#3.Deploy Percona application with liveness probe running db queries continuously
#4.Get the Replica name and node name where the replica is scheduled
#5.Kill the node using vagrant halt.
#6.Check the node state after vagrant halt.
#7.Check the percona pod status.
#8.Bring up the node and check all the replicas are up and running.
#8.perform Cleanup.
##########################################################################################

- hosts: localhost

  vars_files:
    - test-node-failure-vars.yml

  tasks:

   - block:

       - include: pre-requisites.yml


       - name: Check status of maya-apiserver
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
           ns: openebs 
           app: maya-apiserver

       - name: Get percona spec and liveness scripts
         get_url:
           url: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_items: "{{ percona_links }}"

       - name: Replace volume-claim name with test parameters
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/percona.yaml"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


       - name: Create namespace to deploy application
         shell: source ~/.profile; kubectl create ns {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Create a configmap with the liveness sql script
         shell: source ~/.profile; kubectl create configmap sqltest --from-file={{ percona_files.1 }} -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'configmap' and 'created' not in result.stdout"

       - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ percona_files.0 }}"
           ns: "{{ namespace }}"

       - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            app: percona

       - name: Wait for 120s to ensure liveness check starts
         wait_for:
           timeout: 120

       - include: node-failure-task.yml
         with_items:
             - ctrl
             - percona
             - rep


       - name: Test Passed
         set_fact:
           flag: "Test Passed"

       - name: Set Status
         set_fact:
           status: "good"

     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"


       - name: Set Status
         set_fact:
           status: "danger"

     always:
       - block:

           - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/find_regex.yml"
             vars:
               string:
                 - 'panic'
                 - 'Read-only'
               path: "{{result_kube_home.stdout}}/{{test_log_path}}"
               destination_node: "{{groups['kubernetes-kubemasters'].0}}"

           - include: cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - name: Delete namespace
             shell: source ~/.profile; kubectl delete ns {{ namespace }}
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
             changed_when: true


           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{ cflag }}'
               color: "{{status}}"
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')







