#!/bin/bash

# This file implements the K8s FlexVolume Interface
#  for dedicated OpenEBS Storage, using iscsi to 
#  connect to the OpenEBS VSM/Volume. 
#
# This file should be placed in the flexvolume plugin dir 
# on all the  k8s minion nodes
# 
# This version only support two functions:
# - mount : create an VSM if not already present and mount it 
# - unmount : unmount the volume 
#
# Debug mode can be enabled by specifying "debug : 1", in the
#  flexvolume options in the k8s yaml spec file. The logs will
#  be stored under /tmp/logs/openebs-iscsi/openebs-iscsi.log
#
# For interacting with the OpenEBS storage, json/yaml files are used. 
# The exchanged spec files are located in /tmp/openebs/specs
#


usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    err "\t$0 getvolumename <json params>"
    exit 1
}

err() {
    echo -ne $* 1>&2
}

log() {
    echo -ne $* >&1
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

createvolumespec(){
    VOLUMENAME=$1
    VOLUMESIZE=$2
    sudo mkdir -p /tmp/openebs/specs
    echo -e "kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n name: ${VOLUMENAME}\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: ${VOLUMESIZE}\n" > "/tmp/openebs/specs/openebs-${VOLUMENAME}-pvc.yaml"
}

clearvolumespec(){
    VOLUMENAME=$1
    sudo rm -rf "/tmp/openebs/specs/openebs-${VOLUMENAME}-pvc.yaml"
}

checkvolumeexists(){
    VOLUMENAME=$1      
    OPENEBS_API_URL=$2     
  
    echo -e "checkvolumeexists ${VOLUMENAME} ${OPENEBS_API_URL}/volume/info/${VOLUMENAME}" >>  /tmp/logs/openebs-iscsi/openebs-iscsi.log
    # Get curl response as well as HTTP Code
    response=$(curl --write-out %{http_code} --silent --output /tmp/logs/openebs-iscsi/checkvolumeexists.json "${OPENEBS_API_URL}/volume/info/${VOLUMENAME}")
    #response=$(jq -r '.error_code' /tmp/logs/openebs-iscsi/checkvolumeexists.json)
    if [ "${response}" == 404 ] ; then
        # Volume doesn't exist
        echo -e "checkvolumeexists - response is 404" >>  /tmp/logs/openebs-iscsi/openebs-iscsi.log
        echo 0
    else
        # Volume Exists
        echo -e "checkvolumeexists - response is assumed to be 200" >>  /tmp/logs/openebs-iscsi/openebs-iscsi.log
        targetportal=$(jq -r '.annotations.targetportal' /tmp/logs/openebs-iscsi/checkvolumeexists.json)
        iqn=$(jq -r '.annotations.iqn' /tmp/logs/openebs-iscsi/checkvolumeexists.json)
        data="${targetportal}\n${iqn}"
        echo -e "${data}" > /tmp/logs/openebs-iscsi/specs.txt
        echo 1
    fi
}
createvolume(){
    VOLUMENAME=$1
    OPENEBS_API_URL=$2
    VOLUMESIZE=$3

    # Check if volume already exists
    status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
    if [ "${status}" -ne 0 ] ; then
       # Volume already exists
       exit 0
    fi
    
    # if it doesn't exist
    createvolumespec "${VOLUMENAME}" "${VOLUMESIZE}"

    # Wait for response from server
    until $(curl --output /tmp/logs/openebs-iscsi/createvolume.json --silent --fail -k -H "Content-Type: application/yaml" \
           -XPOST -d "$(cat /tmp/openebs/specs/openebs-${VOLUMENAME}-pvc.yaml)" \
          "${OPENEBS_API_URL}/volumes/"); do
    #printf '.'
    sleep 5 
    done

    status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
    if [ "${status}" == 0 ] ; then
       # Error while creating volume
       echo 0
    else
        # Volume created successfully
        clearvolumespec "${VOLUMENAME}"
        echo 1
    fi
}
deletevolume() {
    OPENEBS_API_URL=$1
    VOLUMENAME=$2

    curl "${OPENEBS_API_URL}/volume/delete/${VOLUMENAME}" > /tmp/logs/openebs-iscsi/deletevolume.json 
    response=$(jq -r '.Status.Reason' /tmp/logs/openebs-iscsi/deletevolume.json)
    if [ "${response}" == "complete" ] ; then
        # Volume Deleted.
        clearvolumespec "${VOLUMENAME}"
        echo 1
    else
        # Error while deleting volume.
        echo 0
    fi
}

domount() {
    MNTPATH="$1"
    VOLUME_SRC=$(echo "$2" | jq -r '.source')
    FSTYPE=$(echo "$2" | jq -r '.["kubernetes.io/fsType"]')
    OPENEBS_API_URL=$(echo "$2" | jq -r '.openebsApiUrl')
    VOLUMENAME=$(echo "$2" | jq -r '.name')
    SIZE=$(echo "$2" | jq -r '.size')
    DEBUG=$(echo "$2" | jq -r '.debug')
    MOUNT_OPTIONS=$(echo "$2" | jq -r '.mountOptions')

    # Print logs
    LOGS="Mount Path is: $MNTPATH\nVolume Source is: $VOLUME_SRC\nFile System of the Volume is:$FSTYPE\nOpenEBS API URL: $OPENEBS_API_URL\nSize of the Volume: $SIZE\nMount Options for the Volume: $MOUNT_OPTIONS\nJSON Data received by openebs-iscsi driver:\n$2"

    if [ "${DEBUG}" == "1" ] ; then
        sudo mkdir -p /tmp/logs/openebs-iscsi/
        echo -e "${LOGS}" >>  /tmp/logs/openebs-iscsi/openebs-iscsi.log
    fi

    if [ $(ismounted) == 1 ] ; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
    if [ "${status}" -ne 0 ] ; then
       # Volume already exists
       exit 0
    else
        # Volume doesn't exist, create Volume
        status=$(createvolume "${VOLUMENAME}" "$OPENEBS_API_URL" "${SIZE}")
        if [ "${status}" == 0 ] ; then
            # Volume Creation Failed
            exit 0

        else
            # Volume successfully created, get target portal and iqn values.
            data=($(cat "/tmp/logs/openebs-iscsi/specs.txt"))
            i=0
            for t in "${data[@]}"
            do
                declare "var$i"=$t
                i=$((i+1))
            done
            
            targetportal="${var0}";
            iqn="${var1}";
        fi
    fi

    #TBD
    #use iscsiadm to connect to targetportal,iqn,lun1
    #format the mounted disk
    #mount the volume

    if [ $? -ne 0 ]; then
        2>&1
        err '{ "status": "Failure", "message": "Failed to mount device '${VOLUME_SRC}' at '${MNTPATH}' , volume_src: '${VOLUME_SRC}'"}'
        exit 1
    fi
    log '{"status": "Success"}'
    exit 0
}

unmount() {
    MNTPATH=$1
    if [ $(ismounted) -eq 0 ] ; then
      log "{\"status\": \"Success\"}"
      exit 0
    fi

    umount ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
      err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"                exit 1
    fi
    log '{"status": "Success"}'
    exit 0
}

getvolumename() {
    SOURCE=$(echo $2 | jq -r '.source')
    MOUNT_OPTIONS=$(echo $2 | jq -r '.mountOptions')
    log "{\"status\": \"Success\", \"volumeName\": \"${SOURCE}/${MOUNT_OPTIONS}\"}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
    log '{"status": "Success"}'
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    getvolumename)
        getvolumename $*
        ;;
    *)

err "{ \"status\": \"Not supported\" }"
exit 1

esac

exit 1;
