# Description: Deploying OpenEBS and Percona application with its own Namespaces.
# Author: Swarna

########################################################################################
# Test Steps:
#1.Check the maya-apiserver is running already, if it running delete the openebs-operator.
#2.Copy Test artifacts to kubemaster.
#3.Deploy OpenEBS with its own namespace and check the pod status
#4.Replace PVC name with test case name in percona yaml and deploy with its own namespace
#5.Get the IP address of percona pod.
#6.Install mysql-client package to write data on percona mysql.
#7.Write the data in percona mysql.
##########################################################################################

- hosts: localhost

  vars_files:
    - openebs-ns-vars.yml

  tasks:

   - block:

       - name: Check whether maya-apiserver pod is running
         shell: source ~/.profile; kubectl get pods --all-namespaces | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 20
         retries: 2
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         ignore_errors: true
         become: true

       - block:

           - name: Delete the openebs operator
             shell: source ~/.profile; kubectl delete -f "{{ openebs_operator_link }}"
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - name: Confirm pod has been deleted
             shell: source ~/.profile; kubectl get pods
             args:
               executable: /bin/bash
             register: result
             until: "'maya-apiserver' or 'openebs-provisioner' not in result.stdout"
             delay: 30
             retries: 3
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

         when: "result.rc == 0"

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Copy the openebs-operator to kube master
         copy:
           src: "{{ openebs_operator }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


       - name: Deploy openebs-operator with openebs namespace
         shell: source ~/.profile; kubectl apply -f "{{ openebs_operator }}"
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern --all-namespaces "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check whether maya-apiserver pod is deployed
         shell: source ~/.profile; kubectl get pods --all-namespaces | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 250
         retries: 5
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Creating  percona namespace to deploy percona application
         shell: source ~/.profile; kubectl create namespace  percona
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Get percona spec and liveness scripts
         get_url:
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace volume-claim name with test parameters
         replace:
           path: "{{ result_kube_home.stdout }}/demo-percona-mysql-pvc.yaml"
           regexp: '{{ item.0 }}'
           replace: '{{ item.1 }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_together:
           - "{{replace_item}}"
           - "{{replace_with}}"


       - name: Deploy Percona application with percona namespace
         shell: source ~/.profile; kubectl apply -f "{{ percona_file }}" -n percona
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Confirm pod status is running
         shell: source ~/.profile; kubectl get pods --all-namespaces | grep percona
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 300
         retries: 15

       - name: Get IP address of percona mysql pod
         shell: source ~/.profile; kubectl get pod percona -n percona -o wide --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_IP

       - name: Set IP of Pod to variable
         set_fact:
           pod_ip: "{{ result_IP.stdout.split()[5] }}"

       - name: Run apt-get update via shell
         apt:
            name: update
         become: true
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         ignore_errors: true

       - name: Install mysql-client on K8S-master
         apt:
            name: install -y mysql-client
         become: true
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Write a test database into percona mysql
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create database tdb;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create table ttbl (Data VARCHAR(20));" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "insert into ttbl (Data) VALUES ('tdata');" tdb
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Testing the database tables on percona mysql
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "show databases;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "select * from ttbl;" tdb
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Set flag tp pass if test case is passed
         set_fact:
           flag: "Pass"

     rescue:
       - name: Set flag to fail if test case is failed
         set_fact:
           flag: "Fail"

     always:

       - include: k8s-percona-openebs-pod-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')





