---
- hosts: localhost

  vars_files:
    - snapshot-vars.yml

  tasks:
   - block:
       - include: simple-volume-prerequisites.yml

       - include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ operator_ns }}"
            lkey: name
            lvalue: maya-apiserver

       - name: Store maya-apiserver pod name in variable
         set_fact:
           maya_pod: "{{ result.stdout_lines[1].split()[0] }}"

       - name: Copy the volume claim to kube master
         copy:
           src: "{{ volume_def }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Create  namespace
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"  

       - include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ volume_def }}"
           ns: "{{ namespace }}"

       - name: Confirm volume container is running
         shell: >
           source ~/.profile;
           kubectl get pods -n {{namespace}} | grep {{item}} | grep Running | wc -l
         args:
           executable: /bin/bash
         register: result
         until: result.stdout|int >= 1
         delay: 30
         retries: 10
         with_items:
           - ctrl
           - rep
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Get storage ctrl pod name
         shell: source ~/.profile; kubectl get pods -n {{namespace}}  | grep ctrl
         args:
           executable: /bin/bash
         register: ctrl_name
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set ctrl pod name to variable
         set_fact:
           ctrl_pod_name: "{{ ctrl_name.stdout.split()[0] }}"
           vol_name: "{{ ctrl_name.stdout.split()[0].split('-ctrl-')[0] }}"

       - name: Get IP address of ctrl pod
         shell: source ~/.profile; kubectl describe pod {{ ctrl_pod_name }} -n {{namespace}} | grep IP
         args:
           executable: /bin/bash
         register: ctrl_IP
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Set IP of Pod to variable
         set_fact:
           ctrl_ip: "{{ ctrl_IP.stdout_lines[0].split()[1]}}"

       - name: Establish iSCSI session with volume
         shell: iscsiadm -m discovery -t st -p {{ ctrl_ip }}:3260
         args:
           executable: /bin/bash
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
         register: result
         until: "result.rc == 0"
         delay: 30
         retries: 15

       - name: Store target iqn in variable
         set_fact:
           iqn: "{{result.stdout.split(',')[1].split()[1]}}"

       - name: Login to iSCSI target
         open_iscsi:
           show_nodes: yes
           login: yes
           target: "{{iqn}}"
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
         register: result

       - name: Check device nodes
         set_fact:
           scsi_device: "{{result.devicenodes[0]}}"

       - name: Create file system on iSCSI disk
         filesystem:
           fstype: ext4
           dev: "{{scsi_device}}"
           force: no
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Mount device by Label
         mount:
           name: "{{mount_point}}"
           src: "{{scsi_device}}"
           fstype: ext4
           opts: discard,_netdev
           state: mounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Place test data into volume
         command: >
           dd if=/dev/urandom of={{mount_point}}/f1
           bs=512 count={{test_data_size | int * 1024}}
         args:
           creates: "{{mount_point}}/f1"
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Get the checksum of file created
         stat:
           path: "{{mount_point}}/f1"
           checksum_algorithm: "{{checksum}}"
         become: true
         register: result
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Save checksum to variable
         set_fact:
           ckey: "{{result.stat.checksum}}"
         failed_when: result.stat.checksum is not defined

       - name: Unmount the volume
         mount:
           name: "{{mount_point}}"
           state: unmounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Create volume snapshot
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot create --volname {{vol_name}} -n {{namespace}}
           --snapname {{snap_name}}
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'created' not in result_snap.stdout"

       - name: Confirm successful snapshot creation
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot list --volname {{vol_name}} -n {{namespace}}
         args:
           executable: /bin/bash
         register: result_snap_list
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "snap_name not in result_snap_list.stdout"

       - name: Remount the volume
         mount:
           name: "{{mount_point}}"
           src: "{{scsi_device}}"
           fstype: ext4
           opts: discard,_netdev
           state: mounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Remove the file created
         file:
           path: "{{mount_point}}/f1"
           state: absent
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Unmount the volume again before snap revert
         mount:
           name: "{{mount_point}}"
           state: unmounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Revert volume snapshot
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot revert --volname {{vol_name}} -n {{namespace}}
           --snapname {{snap_name}}
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'Reverting to snapshot' not in result_snap.stdout"

       - name: Remount the volume
         mount:
           name: "{{mount_point}}"
           src: "{{scsi_device}}"
           fstype: ext4
           opts: discard,_netdev
           state: mounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Check if file is present
         stat:
           path: "{{mount_point}}/f1"
           checksum_algorithm: "{{checksum}}"
         become: true
         register: result
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
         failed_when: result.stat.exists is not defined and result.stat.exists != True

       - name: Store checksum into variable
         set_fact:
           rkey: "{{result.stat.checksum}}"
         failed_when: result.stat.checksum is not defined

       - name: Compare the file checksum after revert
         debug:
           msg: "Verified snapshot create and revert successfully"
         failed_when: rkey != ckey

       - name: Unmount the storage volume as part of cleanup
         mount:
           name: "{{mount_point}}"
           state: unmounted
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Tear down iSCSI sessions
         open_iscsi:
           login: no
           target: "{{ iqn }}"
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Remove stale node entries for ISCSI target
         command: iscsiadm -m node -T {{iqn}} -o delete
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Setting pass flag
         set_fact:
            flag: "Test Passed"
            status: "good"
            status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
      - block:
        - include: snapshot-cleanup.yml

        - name: Test Cleanup Pass
          set_fact:
            cflag: "Cleanup Passed"

        rescue:
        - name: Test Cleanup Fail
          set_fact:
            cflag: "Cleanup Failed"

        always:

         - include_tasks: "{{utils_path}}/stern_task.yml"
           vars:
             status: stop

         - include_tasks: "{{utils_path}}/namespace_task.yml"
           vars:
               status: delete
               ns: "{{ namespace  }}"

         - name: Set Test Name as Fact
           set_fact:
             testname: "{{ test_name }}"
