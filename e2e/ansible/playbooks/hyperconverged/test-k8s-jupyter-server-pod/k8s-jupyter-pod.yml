# k8s-jupyter-pod.yml
# Description: Deploy Jupyter application using OpenEBS volume.

###############################################################################################
#Test Steps:
#1. Check whether the OpenEBS components are deployed.
#2. Download the test artifacts to k8s master.
#3. Deploy Jupyter application.
#4. Check if the application pod is up and running
#5. Check if the Jupyter service us up.
#6. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-jupyter-pod-vars.yml

  tasks:

   - block:

       - include: k8s-jupyter-pod-prereq.yml

       - name: 2a) Download YAML for jupyter notebook server plugin
         include_tasks: "{{utils_path}}/get_url.yml"
         vars:
           url: "{{ jupyter_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"

       - name: 2b) Check whether maya-apiserver is deployed
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ operator_ns }}"
            lkey: name
            lvalue: maya-apiserver

       - name: 2c) Replace volume size in plugin YAML
         lineinfile:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: "storage:"
           line: "      storage: \"{{jupyter_server_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2d) Replace storage-class to use cstor storage engine
         replace:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: 'openebs-jiva-default'
           replace: '{{ cstor_sc }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         when:  storage_engine  == 'cStor'

       - name: 2d) Replace storage-class to use jiva storage engine
         replace:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: 'openebs-jiva-default'
           replace: '{{ jiva_sc }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         when:  storage_engine  == 'jiva'

       - name: 3) Deploy jupyter notebook server pod
         include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ pod_yaml_alias }}"
           ns: default

       - name: 4) Confirm if the jupyter pod status is running
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: default
            lkey: name
            lvalue: jupyter-server

       - name: 5) Verify that the jupyter notebook server is a cluster service
         shell: source ~/.profile; kubectl get svc
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_service
         failed_when: "'jupyter-service' not in result_service.stdout"

       - name: Setting pass flag
         set_fact:
            flag: "Test Passed"
            status: "good"
            status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
       - block:

           - include: k8s-jupyter-pod-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"
