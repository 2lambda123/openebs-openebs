---
# Steps
# 1) Downloading helm
# 2) Initialising helm
# 3) Check if the tiller is deployed
# 4) Create service account for tiller
# 5) Create cluster role binding
# 6) Update the deployment with the service account
# 7) Install OpenEBS using stable helm chart
# 8) Check if the installation is successful
# 9) Create the default storage classes

- name: 1) Install helm.
  shell: curl -Lo /tmp/helm-linux-amd64.tar.gz https://kubernetes-helm.storage.googleapis.com/helm-v2.6.2-linux-amd64.tar.gz; tar -xvf /tmp/helm-linux-amd64.tar.gz -C /tmp/; chmod +x  /tmp/linux-amd64/helm && sudo mv /tmp/linux-amd64/helm /usr/local/bin/
  args:
    executable: /bin/bash

<<<<<<< HEAD
- name: 2) Tiller setup.
=======
- name: Tiller setup
>>>>>>> 24902556589f6822d183fc625e15f51e020f5618
  shell: helm init
  args:
    executable: /bin/bash
  register: tiller_out
  until: "'Happy Helming' in tiller_out.stdout"
  delay: 30
  retries: 15

- name: 3) Checking if the tiller pod is created.
  shell: helm version
  args:
    executable: /bin/bash
  register: tiller_version
  until: "'Server: &version.Version' in tiller_version.stdout"
<<<<<<< HEAD
  delay: 120
  retries: 10

- block:
=======
  delay: 30
  retries: 5

- name: Creating service account
  shell: kubectl -n kube-system create sa tiller
  args:
    executable: /bin/bash
  register: tiller
  until: "'serviceaccount \"tiller\" created' in tiller.stdout"
  delay: 60
  retries: 5
>>>>>>> 24902556589f6822d183fc625e15f51e020f5618

    - name: 4) Checking if the tiller service account already exists.
      shell: kubectl get sa -n kube-system | grep tiller
      args:
        executable: /bin/bash
      register: sa
      until: "'tiller' in sa.stdout"
      delay: 20
      retries: 2
  
  rescue:
     
    - name: 4a) Creating the service account
      shell: kubectl -n kube-system create sa tiller
      args:
        executable: /bin/bash
      register: tiller
      until: "'\"tiller\" created' in tiller.stdout"
      delay: 60
      retries: 5
  
- block:

     - name: 5) Checking if the tiller cluster role binding already exists.
       shell: kubectl get clusterrolebinding | grep tiller
       args:
         executable: /bin/bash
       register: cr
       until: "'tiller' in cr.stdout"
       delay: 10
       retries: 2

  rescue:

     - name: 5a) Creating the cluster rolebinding.
       shell: kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
       args:
         executable: /bin/bash
       register: crb
       until: "'\"tiller\" created' in crb.stdout"
       delay: 60
       retries: 5

- name: 6) Getting the home directory of kubernetes master.
  shell: source ~/.profile; echo $HOME
  args:
    executable: /bin/bash
  register: result_kube_home

<<<<<<< HEAD
- name: 6a) Copying the patch yaml file to kubernetes master.
=======
- name: Copying the patch yaml file to kubernetes master
>>>>>>> 24902556589f6822d183fc625e15f51e020f5618
  copy:
    src: "{{ update_deploy_file }}"
    dest: "{{ result_kube_home.stdout }}"

- name : 6b) Updating the tiller-deploy deployment with the service account.
  shell: kubectl -n kube-system patch deploy/tiller-deploy -p "$(cat {{result_kube_home.stdout}}/{{ update_deploy_file }})"
  args:
    executable: /bin/bash
  register: tiller_deploy
<<<<<<< HEAD
  until: "'\"tiller-deploy\" patched' in tiller_deploy.stdout"
  delay: 60
  retries: 6

- name: 7) Installing openebs using stable charts.
=======
  until: "'deployment \"tiller-deploy\" patched' in tiller_deploy.stdout"
  delay: 20
  retries: 6

#- name: Adding OpenEBS charts to repo
#  shell: helm repo add openebs-charts "{{ charts }}"
#  args:
#    executable: /bin/bash
#  register: repos
#  until: "'\"openebs-charts\" has been added to your repositories' in repos.stdout"
#  delay: 20
#  retries: 6

#- name: Update the repo
#  shell: helm repo update
#  args:
#    executable: /bin/bash
#  register: update
#  until: "'Update Complete' in update.stdout"
#  delay: 20
#  retries: 6

- name: Install openebs
>>>>>>> 24902556589f6822d183fc625e15f51e020f5618
  shell: helm install stable/openebs --name openebs --namespace openebs
  args:
    executable: /bin/bash
  register: openebs_out
  until: "'The OpenEBS has been installed' in openebs_out.stdout"
  delay: 120
  retries: 5

<<<<<<< HEAD
- name: 8) Checking if the provisioner is up.
=======
- name: Check if provisioner is deployed
>>>>>>> 24902556589f6822d183fc625e15f51e020f5618
  shell: kubectl get pods -n "{{ namespace }}" | grep "openebs-provisioner"
  args:
    executable: /bin/bash
  register: deployment
  until: "'Running' in deployment.stdout"
  delay: 60
  retries: 15

- name: 8a) Checking if the openebs-apiserver is up.
  shell: kubectl get pods -n "{{ namespace }}" | grep "openebs-apiserver"
  args:
    executable: /bin/bash
  register: api_server
  until: "'Running' in api_server.stdout"
  delay: 60
  retries: 15

- name: 9) Creating the default storage classes
  shell: kubectl apply -f "{{ storage_classes }}"
  args:
    executable: /bin/bash


