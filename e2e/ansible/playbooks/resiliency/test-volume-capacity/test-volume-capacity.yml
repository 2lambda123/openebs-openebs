#test-volume-capacity.yml
# Description: Fill the OpenEBS volume and test the volume capacity
# Author: nsathyaseelan

###############################################################################################
#Test Steps:
# 1. Check the maya-apiserver is running.
# 2. Download and Copy Test artifacts to kubemaster.
# 3. Create test artifacts Namespace.
# 4. Run the FIO job on OpenEBS volumes.
# 5. Check the status of FIO job.
# 6. Verify the fio logs.
# 7. Obtain the IP address of the controller pod.
# 8. Login to ISCSI volume.
# 9. Create directory and  Mount the volume.    
#10. Obtaining the fio job file in the mount directory
#11. Remove the fio file to check the volume status.
#13. Cleaning the test artifacts.
###############################################################################################

---
- hosts: localhost

  vars_files:
    - test-volume-vars.yml

  tasks:

    - block:

        - include: test-volume-prereq.yml

        - name: 1) Check if maya-apiserver is running.
          include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
          vars:
            ns: openebs
            app: apiserver

        - name: 2) Copy the fio job specific file to K8s master
          copy:
            src: "{{ item }}"
            dest: "{{ result_kube_home.stdout }}"
          with_items: "{{ fio_files }}"
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 3) Create test specific namespace
          shell: source ~/.profile; kubectl create ns {{ namespace }}
          args:
            executable: /bin/bash
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 4) Deploy the fio jobs yaml
          shell: source ~/.profile; kubectl create -f "{{ fio }}" -n "{{ namespace }}"
          args:
            executable: /bin/bash
          register: result_fio
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 5) Check if the ctrl and replica pods are running
          shell: >
           kubectl get pods -n "{{ namespace }}" | grep "{{ item }}"
          args:
            executable: /bin/bash
          register: result_pod_status
          until: "'Running' in result_pod_status.stdout"
          delay: 60
          retries: 15
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
          with_items:
            - ctrl
            - rep

        - name: 5b) Obtaning the fio pod name
          shell: source ~/.profile; kubectl get pods -n "{{ namespace }}" | grep fio | awk {'print $1'}
          args:
            executable: /bin/bash
          register: result_pod
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
     
        - name: 5c) Check if fio job created successfully
          shell: source ~/.profile; kubectl get jobs -n "{{ namespace }}" | grep fio | awk {'print $1'}
          args:
            executable: /bin/bash
          register: result_job
          failed_when: "'fio' not in result_job.stdout"
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 5d) Check if fio write job is completed
          shell: source ~/.profile; kubectl get pods -a -n "{{ namespace }}" | grep fio
          args:
            executable: /bin/bash
          register: result_fio_pod
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
          until: "'Completed' in result_fio_pod.stdout"
          delay: 60
          retries: 10

        - name: 6) Verify the fio logs to check if run is complete w/o errors
          shell: >
            kubectl logs -f {{ result_pod.stdout }} -n "{{ namespace }}"
            | grep -i error | cut -d ":" -f 2
            | sort | uniq
          args:
            executable: /bin/bash
          register: result_di
          failed_when: result_di.stdout != " 0,"
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 7) Get storage ctrl pod name
          shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep ctrl
          args:
            executable: /bin/bash
          register: ctrl_name
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

        - name: 7a) Set ctrl pod name to variable
          set_fact:
            ctrl_pod_name: "{{ ctrl_name.stdout.split()[0] }}"

        - name: 7b) Get IP address of ctrl pod
          shell: source ~/.profile; kubectl describe pod {{ ctrl_pod_name }} -n {{ namespace }} | grep IP
          args:
            executable: /bin/bash
          register: ctrl_IP
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

        - name: 7c) Set IP of Pod to variable
          set_fact:
            ctrl_ip: "{{ ctrl_IP.stdout_lines[0].split()[1]}}"

        - name: 8) Establish iSCSI session with volume
          shell: iscsiadm -m discovery -t st -p {{ ctrl_ip }}:3260
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
          register: result

        - name: 8a) Store target iqn in variable
          set_fact:
            iqn: "{{result.stdout.split(',')[1].split()[1]}}"

        - name: 9) Login to iSCSI target
          open_iscsi:
             show_nodes: yes
             login: yes
             target: "{{iqn}}"
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
          register: result

        - name: 9a) Check device nodes
          set_fact:
            scsi_device: "{{result.devicenodes[0]}}"

        - name: 10) Create the directory to mount the volume
          file:
            path: "{{mount_point}}"
            state: directory
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

        - name: 11) Mount device by Label
          mount:
            name: "{{mount_point}}"
            src: "{{scsi_device}}"
            fstype: ext4
            opts: discard,_netdev
            state: mounted
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

        - name: 12) Find the file in volume mount directory
          find:
            path: '{{ mount_point }}'
            recurse: yes
            file_type: file
          register: files
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

        - name: 13) Remove the files to check the volume status
          file:
            path: '{{ item.path }}'
            state: absent
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
          with_items:
             - '{{ files.files }}'

        - name: Test Passed
          set_fact:
            flag: "Test Passed"

      rescue:
        - name: Test Failed
          set_fact:
            flag: "Test Failed"

      always:
        - block:
            - name: 14) Cleaning the test artifacts
              include: test-volume-cleanup.yml

            - name: Test Cleanup Passed
              set_fact:
                cflag: "Cleanup Passed"

          rescue:
            - name: Test Cleanup Failed
              set_fact:
                cflag: "Cleanup Failed"

          always:

            - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/stern_task.yml"
              vars:
                status: stop

            - name: Delete the namespace
              shell: source ~/.profile; kubectl delete ns "{{ namespace }}"
              args:
                executable: /bin/bash
              delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
              changed_when: true

            - name: Send slack notification
              slack:
                token: "{{ lookup('env','SLACK_TOKEN') }}"
                msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}, {{ cflag }}'
              when: slack_notify | bool and lookup('env','SLACK_TOKEN')
