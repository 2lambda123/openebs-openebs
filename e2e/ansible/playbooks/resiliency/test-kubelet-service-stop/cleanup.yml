---

       - name: check the node is in Ready state after kubelet service start
         shell: source ~/.profile; kubectl get nodes {{node_name.stdout}} | grep 'NotReady' | grep 'none' | wc -l
         args:
           executable: /bin/bash
         register: result1
         until: "'0' in result1.stdout"
         delay: 60
         retries: 5
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         changed_when: True
         ignore_errors: True

       - block:

           - name: Start kubelet service if the node is in NotReady state
             shell: source ~/.profile; systemctl start kubelet.service
             args:
               executable: /bin/bash
             register: result
             become: True
             delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
             changed_when: True

           - name: Check the node is in Ready state after kubelet service start
             shell: source ~/.profile; kubectl get nodes {{node_name.stdout}} | grep 'NotReady' | grep 'none' | wc -l
             args:
               executable: /bin/bash
             register: result
             until: "'0' in result.stdout"
             delay: 60
             retries: 5
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
             changed_when: True

           - name: sleep for 120s
             wait_for:
               timeout: "120"

         when: "'0' not in result1.stdout"

       - name: Get pv name to verify successful pvc deletion
         shell: source ~/.profile; kubectl get pvc -n {{ namespace }} | grep {{ replace_with.0 }} | awk {'print $3'}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: pv
         changed_when: true

       - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/delete_deploy.yml"
         vars:
           ns: "{{ namespace }}"
           app_yml: "{{ percona_files.0 }}"

       - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/delete_deploy_check.yml"
         vars:
           ns: "{{ namespace }}"
           app: percona

       - name: Confirm pvc pod has been deleted
         shell: source ~/.profile; kubectl get pods -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "pv.stdout not in result.stdout"
         delay: 30
         retries: 10
         changed_when: true

       - name: sleep for 10 seconds
         wait_for:
           timeout: "10"

       - name: Remove the percona liveness check config map
         shell: source ~/.profile; kubectl delete cm sqltest -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'configmap' and 'deleted' not in result.stdout"
         changed_when: true

       - name: Remove test artifacts
         file:
           path: "{{ result_kube_home.stdout }}/{{ item }}"
           state: absent
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         with_items:
           - "{{percona_files}}"

