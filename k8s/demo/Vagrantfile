# -*- mode: ruby -*-
# vi: set ft=ruby :

#This is parameterized Vagrantfile, that can used for any of the following:
#- Launch VMs auto-configured with kubernetes cluster with dedicated openebs
#- Launch VMs auto-configured with kubernetes cluster with hyperconverged openebs
#- Launch VMs for manual installation of kubernetes or maya clusters or both 
#
#The configurable options include:
#- Specify the number of VMs / node types 
#- Specify the CPU/RAM for each type of node
#- Specify the desired kubernetes cluster installation option - kubeadm, kargo, manual
#- Specify the base operating system - Ubuntu, CentOS, etc., 
#- Specify the kubernetes pod network - flannel, weave, calico, etc,. 
#- In case of dedicated, specify the storage network - host, etc.,

#Specify the OpenEBS Deployment Mode - dedicated=1 (default) or hyperconverged=2
DEPLOY_MODE_NONE = 0 
DEPLOY_MODE_DEDICATED = 1
DEPLOY_MODE_HC = 2

#Changed DEPLOY_MODE from Constant to Local variable deploy_Mode to avoid rewrite warnings on constants.
deploy_Mode=ENV['OPENEBS_DEPLOY_MODE'] || 1

#Specify the release versions to be installed
MAYA_RELEASE_TAG = ENV['MAYA_RELEASE_TAG'] || "0.0.1.0"

#Specify the number of Kubernetes Master nodes, CPU/RAM per node. 
KM_NODES = ENV['KM_NODES'] || 1
KM_MEM = ENV['KM_MEM'] || 2048
KM_CPUS = ENV['KM_CPUS'] || 2

#Specify the number of Kubernetes Minion nodes, CPU/RAM per node. 
KH_NODES = ENV['KH_NODES'] || 1
KH_MEM = ENV['KH_MEM'] || 1024
KH_CPUS = ENV['KH_CPUS'] || 1

#Specify the number of OpenEBS Master nodes, CPU/RAM per node. (Applicable only for dedicated mode)
MM_NODES = ENV['MM_NODES'] || 1
MM_MEM = ENV['MM_MEM'] || 1024
MM_CPUS = ENV['MM_CPUS'] || 1

#Specify the number of OpenEBS Storage Host nodes, CPU/RAM per node. (Applicable only for dedicated mode)
MH_NODES = ENV['MH_NODES'] || 1
MH_MEM = ENV['MH_MEM'] || 1024
MH_CPUS = ENV['MH_CPUS'] || 1

# Don't touch below this line, unless you know what you're doing!

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2"
Vagrant.require_version ">= 1.9.1"

#Local Variables
machine_ip_address = %Q(ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1)
master_ip_address = ""
host_ip_address = ""
get_token = ""
token = ""


# Generic installer script common for server(s) & client(s)
$installerscripts = <<SCRIPT
#!/bin/bash
#Copy setup files - Needed for vagrant-triggers plugin.
mkdir -p /home/ubuntu/demo/installer/scripts
cd /vagrant/
cp -u scripts/setup*.sh /home/ubuntu/demo/installer/scripts 2>/dev/null || :

SCRIPT

#$kubeminionsetup = <<SCRIPT
#Copy iscsid.conf file with increased timeout values
#cd /vagrant/
#cp -u iscsid.conf /etc/iscsi/ 2>/dev/null || :
#
#SCRIPT

	
	
required_plugins = %w(vagrant-cachier vagrant-triggers)

required_plugins.each do |plugin|
  need_restart = false
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    need_restart = true
  end
  exec "vagrant #{ARGV.join(' ')}" if need_restart
end


def configureVM(vmCfg, hostname, cpus, mem)

  vmCfg.vm.box = "ubuntu/xenial64"
  
  #Default timeout is 300 sec for boot. 
  #Uncomment the following line and set the desired timeout value. 
  #vmCfg.vm.boot_timeout = 300
	
  vmCfg.vm.hostname = hostname
  vmCfg.vm.network "private_network", type: "dhcp"

  
  #Adding Vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
     vmCfg.cache.scope = :machine
     vmCfg.cache.enable :apt
     vmCfg.cache.enable :gem     
  end
  
  # Set resources w.r.t Virtualbox provider
  vmCfg.vm.provider "virtualbox" do |vb|
    #Uncomment the following line, to launch the Virtual Box console. 
    #Useful for debugging cases, where the VM doesn't allow login into console
    #vb.gui = true
    vb.memory = mem
    vb.cpus = cpus
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
  end  
  
  return vmCfg
end

# Entry point of this Vagrantfile
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    #Check for invalid deployment modes and default to DEDICATED MODE.  
    if ((deploy_Mode.to_i < DEPLOY_MODE_NONE.to_i) || (deploy_Mode.to_i > DEPLOY_MODE_HC.to_i))
        puts "Invalid value set for OPENEBS_DEPLOY_MODE"
        puts "Usage: OPENEBS_DEPLOY_MODE=0 for NONE"
        puts "Usage: OPENEBS_DEPLOY_MODE=1 for DEDICATED"
        puts "Usage: OPENEBS_DEPLOY_MODE=2 for HYPERCONVERGED"
        puts "Defaulting to DEDICATED MODE. Do you want to continue?(y/n):"
        input = STDIN.gets.chomp
        while 1 do
           if(input == "n")
             Kernel.exit!(0)
           elsif(input == "y")
             break
           else
             puts "Invalid input: type 'y' or 'n'"
             input = STDIN.gets.chomp
           end
        end
        deploy_Mode = 1
    end   
  
    # K8s Master related only !!
    1.upto(KM_NODES.to_i) do |i|
      hostname = "kubemaster-%02d" % [i]
      cpus = KM_CPUS
      mem = KM_MEM            
      config.vm.define hostname do |vmCfg|
        vmCfg = configureVM(vmCfg, hostname, cpus, mem)

        # Run in dedicated deployment mode or hyperconverged mode
        if ((deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i) || (deploy_Mode.to_i == DEPLOY_MODE_HC.to_i))
          
          # Copy scripts to the demo folder.
          vmCfg.vm.provision :shell, inline: $installerscripts, privileged: false
          # Install Kubernetes Master.
          vmCfg.vm.provision :shell, path: "scripts/setup_k8s_master.sh", privileged: true          
        end
      end           
    end
    
    # K8s Minions related only !!
    1.upto(KH_NODES.to_i) do |i|
      hostname = "kubeminion-%02d" % [i]
      cpus = KH_CPUS
      mem = KH_MEM            
      config.vm.define hostname do |vmCfg|
        vmCfg = configureVM(vmCfg, hostname, cpus, mem)

        # Run in dedicated deployment mode or hyperconverged mode
        if ((deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i) || (deploy_Mode.to_i == DEPLOY_MODE_HC.to_i))

          # Copy scripts to the demo folder.
          vmCfg.vm.provision :shell, inline: $installerscripts, privileged: false
          
          # We want to run this only when the VM is first provisioned and get the Master IP to join the cluster
          vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
            trigger.fire do
              info"Getting the Master IP to join the cluster..."
              master_hostname = "kubemaster-01"
              get_ip_address = %Q(vagrant ssh #{master_hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 3 | head -n 1')            
              master_ip_address = `#{get_ip_address}`            
              if master_ip_address == ""            
                  info"The Kubernetes Master is down, bring it up and manually run: setup_k8s_host.sh script on Kubernetes Minion."
              else                           
                  get_token = %Q(vagrant ssh #{master_hostname} -c 'kubectl -n kube-system get secret clusterinfo -o yaml | grep token-map | cut -d ":" -f2 | cut -d " " -f2 | base64 -d | sed "s|{||g;s|}||g" | sed "s|:|.|g" | xargs echo')
                  token = `#{get_token}`                  
                  
                  if token != ""
                    get_cluster_ip = %Q(vagrant ssh #{master_hostname} -c 'kubectl get svc -o yaml | grep clusterIP | cut -d ":" -f2 | cut -d " " -f2')
                    cluster_ip = `#{get_cluster_ip}`                    
                    @machine.communicate.sudo("bash /home/ubuntu/demo/installer/scripts/setup_k8s_host.sh --masterip=#{master_ip_address.strip} --token=#{token.strip} --clusterip=#{cluster_ip.strip}")
                  else
                    info"Invalid Token. Check your Kubernetes setup."
                  end
              end  
            end
          end
        end
      end      
    end
    
    # Maya Master related only !!
    1.upto(MM_NODES.to_i) do |i|
      hostname = "omm-%02d" % [i]
      cpus = MM_CPUS
      mem = MM_MEM

      if ((deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i) || (deploy_Mode.to_i == DEPLOY_MODE_NONE.to_i))     
        config.vm.define hostname do |vmCfg|
          vmCfg = configureVM(vmCfg, hostname, cpus, mem)

          # Run in dedicated deployment mode
          if deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i

            # Copy scripts to the demo folder.
            vmCfg.vm.provision :shell, inline: $installerscripts, privileged: false
            # Install OpenEBS Maya Master
            vmCfg.vm.provision :shell, path: "scripts/setup_omm.sh", :args => "--releasetag=#{MAYA_RELEASE_TAG}", privileged: true
            
            vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
              trigger.fire do
                get_ip_address = %Q(vagrant ssh #{hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')      
                host_ip_address = `#{get_ip_address}`                
                @machine.communicate.sudo("echo 'export NOMAD_ADDR=http://#{host_ip_address.strip}:4646' >> /home/ubuntu/.profile")                
              end
            end            
          end      
        end
      end
    end    

    # Maya Host related only !!
    1.upto(MH_NODES.to_i) do |i|
      hostname = "osh-%02d" % [i]
      cpus = MH_CPUS
      mem = MH_MEM

      if ((deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i) || (deploy_Mode.to_i == DEPLOY_MODE_NONE.to_i))      
        config.vm.define hostname do |vmCfg|
          vmCfg = configureVM(vmCfg, hostname, cpus, mem)
          
          # Run in dedicated deployment mode
          if deploy_Mode.to_i == DEPLOY_MODE_DEDICATED.to_i

            #Copy scripts to the demo folder.
            vmCfg.vm.provision :shell, inline: $installerscripts, privileged: false

            #We want to run this only when the VM is first provisioned and get the Master IP to join the cluster
            vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
              trigger.fire do
                info"Getting the Master IP to join the cluster..."
                master_hostname = "omm-01"            
                get_ip_address = %Q(vagrant ssh #{master_hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')            
                master_ip_address = `#{get_ip_address}`            
                if master_ip_address == ""
                  info"The OpenEBS Maya Master is down, bring it up and manually run: setup_osh.sh script on OpenEBS Storage Host."                              
                else
                  get_ip_address = %Q(vagrant ssh #{hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')      
                  host_ip_address = `#{get_ip_address}`                                                          
                  @machine.communicate.sudo("bash /home/ubuntu/demo/installer/scripts/setup_osh.sh -i #{master_ip_address.strip} -r #{MAYA_RELEASE_TAG}")
                  @machine.communicate.sudo("echo 'export NOMAD_ADDR=http://#{host_ip_address.strip}:4646' >> /home/ubuntu/.profile")
                end  
              end
            end
          end
        end
      end
    end
  end
