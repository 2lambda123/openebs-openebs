#Description: Verify behaviour of "kubectl drain" with OpenEBS volume replicas running on Nodes
#kubectl drain <node>: is one of the common procedures used to implement maintenance cycles on the nodes (hardware refresh, etc..,). With NodeAffinity/Stickiness, verify if is drain is successful.
#Author: Swarna
########################################################################################################################################################################
#Steps:
#1.Deploy openebs operator and storage classes.
#2.Check the maya-apiserver and openebs-provisioner are running
#3.Deploy percona application
#4.Check if the application and the volume pods are up and running.
#5.Check on which node replicas are running anf get the node names.
#6.Update the node names in patch.yaml.
#7.Patch the deployment to include node affinity spec.
#8.Drain the node on which replicas are running using "kubectl drain <nodename>" and check replicas are going to pending state.
#9.Perform cleanup.
########################################################################################################################################################################


- hosts: localhost

  vars_files:
    - kubectl-drain-vars.yml

  tasks:
   - block:


       - include: pre-requisites.yml

       - name: Get the Number of nodes count
         shell: source {{ profile }}; kubectl get nodes | grep 'Ready' | grep 'none' | wc -l
         args:
           executable: /bin/bash
         register: node_out
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Fetch the node count from stdout
         set_fact:
            node_count: " {{ node_out.stdout}}"

       - name: Check status of maya-apiserver
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: "{{ operator_ns }}"
           lkey: name
           lvalue: maya-apiserver

       - name: Create namespace to deploy application
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"

       - name: Download percona spec.
         get_url:
           url: "{{ percona_link }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - include_tasks: drain-node-jiva.yml 
         when: storage_engine == 'jiva'

       - include_tasks: drain-node-cstor.yml
         when: storage_engine == 'cStor'

       - name: Setting pass flag
         set_fact:
           flag: "Test Passed"
           status: "good"
           status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:

       - block:

           - include: cleanup.yml
             when: clean | bool

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"


