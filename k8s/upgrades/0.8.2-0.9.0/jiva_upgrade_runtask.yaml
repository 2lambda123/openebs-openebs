# Runtask for upgrading a jiva volume

# CASTemplate jiva-volume-update-0.8.2-0.9.0 is
# used to upgrade a jiva volume
# TODO: Need to use disable in runtask patch to skip if it is already in
# targetversion
# TODO: Need to take care of patching the jiva replica pods with node names
# TODO: Add comments in required places
apiVersion: openebs.io/v1alpha1
kind: CASTemplate
metadata:
  name: jiva-volume-update-0.8.2-0.9.0
spec:
  defaultConfig:
  - name: baseversion
    value: "0.8.2"
  - name: targetversion
    value: "v0.9.x-ci"
  - name: successStatus
    value: "Success"
  - name: failStatus
    value: "Fail"
  run:
    tasks:
    - upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results
    - upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details
    - upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs
    - upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-nodenames
      #- upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version
    - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs
      ##    - upgrade-jiva-volume-0.8.2-0.9.0-delete-old-rep-rs
  taskNamespace: default
---
## This will patch the upgrade result CR
# with basic details such as name, namespace and kind
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results
  namespace: default
spec:
  meta: |
    id: patchResult
    apiVersion: openebs.io/v1alpha1
    kind: UpgradeResult
    action: patch
    objectName: {{ .UpgradeItem.upgradeResultName }}
    runNamespace: {{ .UpgradeItem.upgradeResultNamespace }}
  task: |-
    type: merge
    pspec: |-
      status:
        resource:
          name: {{ .upgradeItem.name }}
          namespace: {{ .upgradeItem.namespace }}
          kind: {{ .upgradeItem.kind }}
  post: |
    {{- $message := printf "upgradeResult {%s} has been patched with basic details such as name and namespace of the resource to be upgraded." .UpgradeItem.upgradeResultName -}}
    {{- $status := .Config.successStatus.value -}}
    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-upgrade-results" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details
  namespace: default
spec:
  meta: |
    id: getvoldetails
    apiVersion: v1
    kind: PersistentVolume
    action: get
    objectName: {{ .UpgradeItem.name }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- jsonpath .JsonResult "{.metadata.annotations.openebs\\.io/cas-type}" | trim | saveAs "getvoldetails.volCASType" .TaskResult | noop -}}
    {{- .TaskResult.getvoldetails.volCASType | notFoundErr "volume CAS type not found" | saveIf "getvoldetails.notFoundErr" .TaskResult | noop -}}
    {{- jsonpath .JsonResult "{.spec.storageClassName}" | trim | saveAs "getvoldetails.storageClassName" .TaskResult | noop -}}
    {{- .TaskResult.getvoldetails.storageClassName | notFoundErr "StorageClass name not found for given volume" | saveIf "getvoldetails.notFoundErr" .TaskResult | noop -}}
    {{- jsonpath .JsonResult "{.spec.claimRef.namespace}" | trim | saveAs "getvoldetails.pvcNamespace" .TaskResult | noop -}}
    {{- .TaskResult.getvoldetails.pvcNamespace | notFoundErr "pvc namespace not found for given volume" | saveIf "getvoldetails.notFoundErr" .TaskResult | noop -}}
    {{- jsonpath .JsonResult "{.spec.claimRef.name}" | trim | saveAs "getvoldetails.pvcName" .TaskResult | noop -}}
    {{- .TaskResult.getvoldetails.pvcName | notFoundErr "pvc name not found for given volume" | saveIf "getvoldetails.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "details for volume {%s} are : volCASType: {%s}, storageClassName: {%s}, pvcName: {%s}, pvcNamespace: {%s}" .UpgradeItem.name .TaskResult.getvoldetails.volCASType .TaskResult.getvoldetails.storageClassName .TaskResult.getvoldetails.pvcName .TaskResult.getvoldetails.pvcNamespace -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-volume-details" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}

---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version
  namespace: default
spec:
  meta: |
    id: get
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    action: get
    objectName: {{ .TaskResult.getvoldetails.storageClassName }}
  post: |
    {{- jsonpath .JsonResult "{.metadata.resourceVersion}" | trim | saveAs "getstorageclassresversion.storageClassResVersion" .TaskResult | noop -}}
    {{- .TaskResult.getstorageclassresversion.storageClassResVersion | notFoundErr "storage class resource version not found" | saveIf "getstorageclassresversion.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "resource version for storage class {%s} is : {%s}" .TaskResult.getvoldetails.storageClassName .TaskResult.getstorageclassresversion.storageClassResVersion -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-sc-res-version" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment
  namespace: default
spec:
  meta: |
    id: listtargetdeployment
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller=jiva-controller
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listtargetdeployment.targetDeploymentName" .TaskResult | noop -}}
    {{- .TaskResult.listtargetdeployment.targetDeploymentName | notFoundErr "volume target deployment not found" | saveIf "listtargetdeployment.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "target deployment for this volume is : {%s}" .TaskResult.listtargetdeployment.targetDeploymentName -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-deployment" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment
  namespace: default
spec:
  meta: |
    id: listreplicadeployment
    apiVersion: extensions/v1beta1
    kind: Deployment
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listreplicadeployment.replicaDeploymentName" .TaskResult | noop -}}
    {{- .TaskResult.listreplicadeployment.replicaDeploymentName | notFoundErr "replica deployment not found" | saveIf "listreplicadeployment.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "replica deployment for this volume is : {%s}" .TaskResult.listreplicadeployment.replicaDeploymentName -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-deployment" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc
  namespace: default
spec:
  meta: |
    id: listtargetservice
    apiVersion: v1
    kind: Service
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/controller-service=jiva-controller-svc
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listtargetservice.items" .TaskResult | noop -}}
    {{- .TaskResult.listtargetservice.items | notFoundErr "volume target service not found" | saveIf "listtargetservice.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "target service for this volume is : {%s}" .TaskResult.listtargetservice.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-svc" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs
  namespace: default
spec:
  meta: |
    id: listtargetoldrs
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelselector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listtargetoldrs.items" .TaskResult | noop -}}
    {{- .TaskResult.listtargetoldrs.items | notFoundErr "older replicasets for volume target deployment not found" | saveIf "listtargetoldrs.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "older replicaset to be deleted after patching target {%s} is : {%s}" .TaskResult.listtargetdeployment.targetDeploymentName .TaskResult.listtargetoldrs.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-ctrl-old-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs
  namespace: default
spec:
  meta: |
    id: listreplicaoldsrs
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    action: list
    runNamespace: {{ .UpgradeItem.namespace }}
    options: |-
      labelselector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].metadata.name}" | trim | saveAs "listreplicaoldrs.items" .TaskResult | noop -}}
    {{- .TaskResult.listreplicaoldrs.items | notFoundErr "older replicasets for replica deployment not found" | saveIf "listreplicars.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "older replicaset to be deleted after patching replica deployment {%s} is : {%s}" .TaskResult.listreplicadeployment.replicaDeploymentName .TaskResult.listreplicaoldrs.items -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-old-rs" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-nodenames
  namespace: default
spec:
  meta: |
    id: listreplicanodeName
    runNamespace: {{ .UpgradeItem.namespace }}
    apiVersion: v1
    kind: Pod
    action: list
    options: |-
      labelSelector: openebs.io/persistent-volume={{ .UpgradeItem.name }},openebs.io/replica=jiva-replica
  post: |
    {{- jsonpath .JsonResult "{.items[*].spec.nodeName}" | trim | saveAs "listreplicanodeName.nodeNames" .TaskResult | noop -}}
    {{- .TaskResult.listreplicanodeName.nodeNames | notFoundErr "replica pod nodeName not found" | saveIf "listreplicanodeNames.notFoundErr" .TaskResult | noop -}}
    {{- $message := printf "replica nodeNames for volume: {%s} is {%v}" .UpgradeItem.name .TaskResult.listreplicanodeName.nodeNames -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-get-list-rep-nodenames" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version
  namespace: default
spec:
  meta: |
    id: patchctrldeploymentlatestversions
    apiVersion: extensions/v1beta1
    kind: Deployment
    runNamespace: {{ .UpgradeItem.namespace }}
    action: patch
    objectName: {{ .TaskResult.listtargetdeployment.targetDeploymentName }}
  task: |-
    type: strategic
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getvoldetails.storageClassName }}\nresourceVersion: {{ .TaskResult.getstorageclassresversion.storageClassResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetversion.value }}
      spec:
        template:
          metadata:
            annotations:
              openebs.io/storage-class-ref: "name: {{ .TaskResult.getvoldetails.storageClassName }}\nresourceVersion: {{ .TaskResult.getstorageclassresversion.storageClassResVersion }}\n"
            labels:
              openebs.io/version: {{ .Config.targetversion.value }}
          spec:
            containers:
              - name: {{ .UpgradeItem.name }}-ctrl-con
                image: quay.io/openebs/jiva:{{ .Config.targetversion.value}}
              - name: maya-volume-exporter
                image: quay.io/openebs/m-exporter:{{ .Config.targetversion.value}}
  post: |
    {{- $message := printf "controller deployment {%s} has been patched with latest images for {%s} version." .TaskResult.listtargetdeployment.targetDeploymentName .Config.targetversion.value -}}
    {{- $status := .Config.successStatus.value -}}

    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-deployment-latest-version" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}

---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version
  namespace: default
spec:
  meta: |
    id: postcheckctrldeploymentstatuslatestversions
    apiVersion: extension/v1beta1
    kind: Deployment
    action: get
    objectName: {{ .TaskResult.listtargetdeployment.targetDeploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
    retry: "20,2s"
  post: |
    {{- $rolledOut := jsonpath .JsonResult "{.isRolledOut}" | trim -}}
    {{- $rolloutMessage := jsonpath .JsonResult "{.message}" | trim -}}
    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-status-latest-version" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- if eq $rolledOut "true" }}
    {{- $status := .Config.successStatus.value -}}
    {{- $message := "Post check controller deployment rollout status after patching with latest versions passed" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
    {{- else }}
    {{- $status := .Config.failStatus.value -}}
    {{- $message := "Post check controller deployment rollout status after patching with latest versions failed" -}}
    {{- $taskStatus := upgradeResultWithTaskStatus $status -}}
    {{- $taskMessage := upgradeResultWithTaskMessage $message -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
    {{- "waiting for deployment rollout" | saveAs "postcheckctrldeploymentstatuslatestversions.verifyErr" .TaskResult | noop -}}
    {{- end }}
    #    {{- $taskRetries := upgradeResultWithTaskRetries 7 -}}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image
  namespace: default
spec:
  meta: |
    id: postcheckctrldeploymentimagelatestversions
    apiVersion: extension/v1beta1
    kind: Deployment
    action: get
    objecctName: {{ .TaskResult.listtargetdeployment.targetDeploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- $passed := "true" -}}
    {{- $CustomJsonPath := printf "{range .items[*]}{@.spec.containers[?(@.name == '%s-ctrl-con')].image}" UpgradeItem.name -}}
    {{- $jivaCtrlImage := jsonpath .JsonResult $CustomJsonPath | trim -}}
    {{- $mayaVolExporterImage := jsonpath .JsonResult "{.spec.template.spec.containers[?(@.name=='maya-volume-exporter')].image}" | trim -}}
    {{- $URName := upgradeResultWithTaskOwnerName .UpgradeItem.upgradeResultName -}}
    {{- $URNamespace := upgradeResultWithTaskOwnerNamespace "default" -}}
    {{- $taskName := upgradeResultWithTaskName "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image" -}}
    {{- $taskStartTime := upgradeResultWithTaskStartTime now -}}
    {{- $taskEndTime := upgradeResultWithTaskEndTime now -}}
    {{- if contains .Config.targetversion.value $jivaCtrlImage }}
    {{- else }}
    {{- "jiva-controller container image of volume controller deployment not patched" | saveAs "postCheckctrlDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}
    {{- if contains .Config.targetversion.value $mayaVolExporterImage }}
    {{- else }}
    {{- $passed = "false" -}}
    {{- "maya-exporter container image of volume controller deployment not patched" | saveAs "postCheckctrlDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}
    {{- if eq $passed "true" -}}
    {{- $message := printf "post check for patching controller deployment {%s} with latest images for controler version {%s} has passed." .TaskResult.listtargetdeployment.targetDeploymentName .Config.targetversion.value -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
    {{- else -}}
    {{- $message := printf "post check for patching controller deployment {%s} with latest images for controller version {%s} has failed." .TaskResult.listtargetdeployment.targetDeploymentName .Config.targetversion.value -}}
    {{- upgradeResultUpdateTasks $taskStartTime $URName $URNamespace $taskName $taskStatus $taskMessage $taskEndTime -}}
    {{- end }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version
  namespace: default
spec:
  meta: |
    id: patchreplicadeploymentlatestversion
    apiVersion: extensions/v1beta1
    kind: Deployment
    runNamespace: {{ .UpgradeItem.namespace }}
    action: patch
    objectName: {{ .TaskResult.listreplicadeployment.replicaDeploymentName }}
  task: |-
    {{- $nodeNames := .TaskResult.readlistrep.nodeNames -}}
    type: strategic
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getvoldetails.storageClassName }}\nresourceVersion: {{ .TaskResult.getstorageclassresversion.storageClassResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetversion.value }}
      spec:
        template:
          metadata:
            annotations:
              openebs.io/storage-class-ref: "name: {{ .TaskResult.getvoldetails.storageClassName }}\nresourceVersion: {{ .TaskResult.getstorageclassresversion.storageClassResVersion }}\n"
            labels:
              openebs.io/version: {{ .Config.targetversion.value }}
          spec:
            #            affinity:
            #              nodeAffinity:
            #                requiredDuringSchedulingIgnoredDuringExecution:
            #                  nodeSelectorTerms:
            #                  - matchExpressions:
            #                    - key: kubernetes.io/hostname
            #                      operator: In
            #                      values:
            #                      {{- if ne $nodeNames "" }}
            #                      {{- $nodeNamesMap := $nodeNames | split " " }}
            #                      {{- range $k, $v := $nodeNamesMap }}
            #                      - {{ $v }}
            #                      {{- end }}
            #                      {{- end }}
            containers:
              - name: {{ .UpgradeItem.name }}-rep-con
                image: quay.io/openebs/jiva:{{ .Config.targetversion.value}}
  post: |
    {{- $message := printf "replica deployment {%s} has been patched with latest images for {%s} version." .TaskResult.listreplicadeployment.replicaDeploymentName .Config.targetversion.value -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-patch-rep-deployment-latest-version" "Success" $message 0 now }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version
  namespace: default
spec:
  meta: |
    id: postcheckreplicadeploymentstatuslatestversions
    apiVersion: extension/v1beta1
    kind: Deployment
    action: get
    objectName: {{ .TaskResult.listreplicadeployment.replicaDeploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
    retry: "20,2s"
  post: |
    {{- $rolledOut := jsonpath .JsonResult "{.isRolledOut}" | trim -}}
    {{- $rolloutMessage := jsonpath .JsonResult "{.message}" | trim -}}
    {{- $endTime := now | date "2019" -}}
    {{- $retries := 0 -}}
    {{- if eq $rolledOut "true" }}
    {{- $status := "Success" -}}
    {{- $message := "Post check replica deployment rollout status after patching with latest versions passed" -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version" $status $message $retries now }}
    {{- else }}
    {{- $status := "Failed" -}}
    {{- $message := "Post check replica deployment rollout status after patching with latest versions failed" -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-status-latest-version" $status $message $retries now }}
    {{- "waiting for deployment rollout" | saveAs "postcheckreplicadeploymentstatuslatestversions.verifyErr" .TaskResult | noop -}}
    {{- end }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image
  namespace: default
spec:
  meta: |
    id: postcheckreplicadeploymentimagelatestversions
    apiVersion: extension/v1beta1
    kind: Deployment
    action: get
    objecctName: {{ .TaskResult.listreplicadeployment.replicaDeploymentName }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- $passed := "true" -}}
    {{- $pvName := .UpgradeItem.name -}}
    {{- $CustomJsonPath := printf "{range .items[*]}{@.spec.containers[?(@.name == '%s-rep-con')].image}" UpgradeItem.name -}}
    {{- $jivaRepImage := jsonpath .JsonResult $CustomJsonPath | trim -}}
    {{- if contains .Config.targetversion.value $jivaRepImage }}
    {{- else }}
    {{- "jiva-replica container image of replica deployment not patched" | saveAs "postCheckRepDeploymentImagePatch.verifyErr" .TaskResult | noop -}}
    {{- end }}
    {{- if eq $passed "true" -}}
    {{- $message := printf "post check for patching replica deployment {%s} with latest images for replica version {%s} has passed." .TaskResult.listreplicadeployment.replicaDeploymentName .Config.targetversion.value -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-rep-deployment-image" "Success" $message 0 now }}
    {{- else -}}
    {{- $message := printf "post check for patching replica deployment {%s} with latest images for replica version {%s} has failed." .TaskResult.listreplicadeployment.replicaDeploymentName .Config.targetversion.value -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-deployment-image" "Failed" $message 0 now }}
    {{- end }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc
  namespace: default
spec:
  meta: |
    id: patchcontrollersvc
    apiVersion: v1
    kind: service
    action: patch
    objectName: {{ .TaskResult.listtargetservice.items }}
    runNamespace: {{ .UpgradeItem.namespace }}
  task: |-
    type: merge
    pspec: |-
      metadata:
        annotations:
          openebs.io/storage-class-ref: "name: {{ .TaskResult.getvoldetails.storageClassName }}\nresourceVersion: {{ .TaskResult.getstorageclassresversion.storageClassResVersion }}\n"
        labels:
          openebs.io/version: {{ .Config.targetversion.value }}
    post: |
      {{ $retries := 0 -}}
      {{- $message := printf "service {%s} has been patched with required labels and annotations." .TaskResult.listtargetservice.items -}}
      {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-patch-ctrl-svc" "Success" $message $retries now }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc
  namespace: default
spec:
  meta: |
    id: postcheckctrlsvc
    apiVersion: v1
    kind: service
    action: get
    objectName: {{ .TaskResult.listtargetservice.items }}
    runNamespace: {{ .UpgradeItem.namespace }}
  post: |
    {{- $scrAnnotation := jsonpath .JsonResult "{.metadata.annotations.openebs\\.io/storage-class-ref}" | trim | saveAs "scrAnnotation" .TaskResult | noop -}}
    {{- $labels := jsonpath .JsonResult "{.metadata.labels.openebs\\.io/version}" | trim | saveAs "labels" .TaskResult | noop -}}
    {{- $desiredAnnotation := printf "name: %s\nresourceVersion: %s\n" .TaskResult.getvoldetails.storageClassName .TaskResult.getstorageclassresversion.storageClassResVersion | saveAs "desAnnotation" .TaskResult | noop -}}
    {{- if contains .TaskResult.getvoldetails.storageClassName .TaskResult.scrAnnotation -}}
    {{- else -}}
    {{- $status := "Failed" -}}
    {{- $message := "Post check for controller service after patching failed" -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc" $status $message $retries now }}
    {{- "annotations not patched for volume target service" | saveAs "postcheckctrlsvc.verifyErr" .TaskResult | noop -}}
    {{- end }}
    {{- if eq "0.8.2" .TaskResult.labels -}}
    {{- $status := "Success" -}}
    {{- $message := "Post check for controller service after patching passed" -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc" $status $message $retries now }}
    {{- else -}}
    {{- $status := "Failed" -}}
    {{- $message := "Post check controller service after patching failed" -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-post-check-ctrl-svc" $status $message $retries now }}
    {{- "labels not patched for jiva controller service" | saveAs "postcheckctrlsvc.verifyErr" .TaskResult | noop -}}
    {{- end }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs
  namespace: default
spec:
  meta: |
    {{- $rslist := .TaskResult.listtargetoldrs.items | default "" | splitList " " -}}
    id: deletectrlreplicaset
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    runNamespace: {{ .UpgradeItem.namespace }}
    action: delete
    repeatWith:
      metas:
      {{- range $k, $rs := $rslist }}
      - objectName: {{ $rs }}
      {{- end }}
  post: |
    {{ $retries := 0 -}}
    {{- $message := printf "older controller replicasets i.e. {%s} has been deleted." .TaskResult.listtargetoldrs.items -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs" "Success" $message $retries now }}
---
apiVersion: openebs.io/v1alpha1
kind: RunTask
metadata:
  name: upgrade-jiva-volume-0.8.2-0.9.0-delete-old-rep-rs
  namespace: default
spec:
  meta: |
    {{- $rslist := .TaskResult.listreplicaoldrs.items | default "" | splitList " " -}}
    id: deletereplicareplicaset
    apiVersion: extensions/v1beta1
    kind: ReplicaSet
    runNamespace: {{ .UpgradeItem.namespace }}
    action: delete
    repeatWith:
      metas:
      {{- range $k, $rs := $rslist }}
      - objectName: {{ $rs }}
      {{- end }}
  post: |
    {{ $retries := 0 -}}
    {{- $message := printf "older replica replicasets i.e. {%s} has been deleted." .TaskResult.listtargetoldrs.items -}}
    {{- updateUpgradeResult .UpgradeItem.upgradeResult "default" "upgrade-jiva-volume-0.8.2-0.9.0-delete-old-ctrl-rs" "Success" $message $retries now }}
