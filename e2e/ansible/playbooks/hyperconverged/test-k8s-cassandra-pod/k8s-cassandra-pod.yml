# k8s-cassandra-pod.yml
# Description: Deploy Cassandra application as statefulset

###############################################################################################
#Test Steps:
#1. Check whether the OpenEBS components are deployed.
#2. Download the test artifacts to k8s master.
#3. Get the number of nodes and set the replica count accordingly.
#4. Deploy the cassandra service and the statefulset.
#5. Check if the application pod is up and running
#6. Generate the load.
#7. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-cassandra-pod-vars.yml

  tasks:
   - block:

       - name: 1) Get $HOME of K8s master for kubernetes user
         shell: source {{ profile }}; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2) Download YAML for cassandra service
         get_url:
           url: "{{ cassandra_service_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ svc_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2a) Download YAML for cassandra statefulset
         get_url:
           url: "{{ cassandra_stateful_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ stateful_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 2b) Download YAML for cassandra loadgen
         get_url:
           url: "{{ cassandra_loadgen_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ loadgen_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3) Get the number of nodes in the cluster
         shell: source {{ profile }}; kubectl get nodes | grep 'Ready' | wc -l
         args:
           executable: /bin/bash
         register: node_out
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3a) Fetch the node count from stdout
         set_fact:
            node_count: " {{ node_out.stdout}}"

       - name: 3b) Replace the replica count in cassandra statefulset yaml
         replace:
           path: "{{ result_kube_home.stdout }}/{{ stateful_yaml_alias }}"
           regexp: 'replicas: 3'
           replace: 'replicas: {{ (node_count) |int-1 }}'
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3c) Replace the io_duration in cassandra loadgen yaml
         replace:
           path: "{{ result_kube_home.stdout }}/{{ loadgen_yaml_alias }}"
           regexp: 'duration=5'
           replace: 'duration={{ io_minutes }}'
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check whether maya-apiserver pod is deployed
         shell: source {{ profile }}; kubectl get pods | grep maya-apiserver
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 120
         retries: 5

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source {{ profile }};
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Deploy cassandra service
         shell: source {{ profile }}; kubectl create -f {{ svc_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4a) Deploy cassandra statefulset
         shell: source {{ profile }}; kubectl create -f {{ stateful_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 5) Confirm cassandra pod status is running
         shell: source {{ profile }}; kubectl get pods | grep cassandra-0
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'cassandra-0' and 'Running' in result.stdout"
         delay: 120
         retries: 15

       - name: 6) Start cassandra load generation
         shell: source {{ profile }}; kubectl create -f {{ loadgen_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 6a) Verify load is running for specified duration
         shell: source {{ profile }}; kubectl get pods | grep cassandra-loadgen
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'Running' in result.stdout"
         delay: 120
         retries: 15

       - name: Wait for {{ (io_minutes) | int *60 }} secs to run load.
         wait_for:
              timeout: "{{ (io_minutes) | int *60 }}"

       - name: 6b) Verify load by using describe keyspaces
         shell: source {{ profile }}; kubectl exec cassandra-0 -- cqlsh --execute "describe keyspaces;"
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'keyspace1' in result.stdout"
         delay: 60
         retries: 5

       - name: Terminate the log aggregator
         shell: source {{ profile }}; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: setting flag if pass
         set_fact:
           flag: "Pass"

     rescue:
       - name: setting flag if fail
         set_fact:
           flag: "Fail"

     always:

       - name: 7) Cleaning up the test artifacts.
         include: k8s-cassandra-pod-cleanup.yml
         when: clean | bool

       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')
