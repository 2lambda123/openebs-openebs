# libiscsi.yml
#Description: Including libiscsi compliance test to OpenEBS e2e suite.

###############################################################################################
#Test Steps:
#1. Install the packages and dependencies.
#2. Copy the test artifacts to k8s master.
#3. Create a storage volume
#4. Obtain the IP address of the controller pod.
#5. Copy the libsiscsi test packages to the minion.
#6. Discover the volume from one of the K8s nodes.
#7. Run libiscsi test suite.
#8. Generate the test summary.
#9. Perform test cleanup.
###############################################################################################

---
- hosts: localhost

  vars_files:
    - libiscsi-vars.yml

  tasks:
   - block:

       - name: 1) Install the prerequisites
         include: libiscsi-prerequisites.yml

       - name: 2) Copy the volume claim to kube master
         copy:
           src: "{{ volume_def }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: 3) Create namespace.       
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"

       - block:

           - name:  Replace storage-class to use jiva storage engine
             replace:
               path: "{{ result_kube_home.stdout }}/{{ volume_def }}"
               regexp: 'openebs-standard'
               replace: '{{ jiva_sc }}'
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: 3a) Create a storage volume via a pvc
             shell: source ~/.profile; kubectl apply -f "{{ result_kube_home.stdout }}/{{ volume_def }}" -n {{ namespace }}
             args:
               executable: /bin/bash
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: 3b) Confirm volume container is running
             shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep {{item}} | grep Running | wc -l
             args:
               executable: /bin/bash
             register: result
             until: result.stdout|int >= 1
             delay: 30
             retries: 10
             with_items:
               - ctrl
               - rep
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: 4) Get storage ctrl pod name
             shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep ctrl
             args:
               executable: /bin/bash
             register: ctrl_name
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: 4a) Set ctrl pod name to variable
             set_fact:
               ctrl_pod_name: "{{ ctrl_name.stdout.split()[0] }}"

           - name: 4b) Get IP address of ctrl pod
             shell: source ~/.profile; kubectl describe pod {{ ctrl_pod_name }} -n {{ namespace }} | grep IP
             args:
               executable: /bin/bash
             register: ctrl_IP
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - name: 4c) Set IP of Pod to variable
             set_fact:
               ctrl_ip: "{{ ctrl_IP.stdout_lines[0].split()[1]}}"
           
         when: storage_engine == 'jiva'

       - block:

           - name: Replace the storage class in the volume definition yaml
             replace:
               path: "{{ result_kube_home.stdout }}/{{ volume_def }}"
               regexp: 'openebs-standard'
               replace: '{{ cstor_sc }}'
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: 3a) Create a storage volume via a pvc
             shell: source ~/.profile; kubectl apply -f "{{ result_kube_home.stdout }}/{{ volume_def }}" -n {{ namespace }}
             args:
               executable: /bin/bash
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: Check if the cstor target has been created and running.
             shell: source ~/.profile; kubectl get pods -n {{ operator_ns }} -l openebs.io/target=cstor-target | grep {{ namespace }}
             args:
               executable: /bin/bash
             register: pods_list
             until: "'Running' in pods_list.stdout"
             delay: 30
             retries: 15
             delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

           - name: Get the target pod name
             set_fact:
                ctrl_pod_name: "{{ pods_list.stdout.split()[0] }}"

           - name: 4b) Get IP address of ctrl pod
             shell: source ~/.profile; kubectl describe pod {{ ctrl_pod_name }} -n {{ operator_ns }} | grep IP
             args:
               executable: /bin/bash
             register: ctrl_IP
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - name: 4c) Set IP of Pod to variable
             set_fact:
               ctrl_ip: "{{ ctrl_IP.stdout_lines[0].split()[1]}}"

         when: storage_engine == 'cStor'

       - name: 5) Copy libiscsi test list into kube minion
         copy:
           src: "{{ test_list }}"
           dest: /tmp
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 6) Discover the iSCSI target using iscsi-ls
         shell: iscsi-ls iscsi://{{ ctrl_ip }}
         register: target
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"
         until: "target.rc == 0"
         delay: 10 
         retries: 12
         tags:
           - skip_ansible_lint

       - name: 6a) Set target iqn to variable
         set_fact:
           iqn: "{{ target.stdout.split()[0] | regex_replace('Target:','')}}"

       - name: 6b) Create log directory for libiscsi test run
         file:
           path: /tmp/libiscsi_suite_logs
           state: directory
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 6c) Get test list from test file
         command: cat /tmp/{{ test_list }}
         register: tests
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 7) Run the libiscsi test suites
         shell: >
           iscsi-test-cu --test={{ item }}
           iscsi://{{ ctrl_ip }}/{{ iqn }}/0
           --dataloss --allow-sanitize
           > /tmp/libiscsi_suite_logs/{{ item }}.log
           2>&1
         args:
           executable: /bin/bash
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"
         with_items: "{{ tests.stdout_lines }}"
         ignore_errors: true

       - name: 8) Generate test summary
         script: parse.sh /tmp/libiscsi_suite_logs
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"
         register: summary

       - name: 8a) Display the test status
         debug:
           msg: "{{ summary.stdout }}"

       - name: Setting pass flag
         set_fact:
            flag: "Test Passed"
            status: "good"
            status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
       - block:

           - include: libiscsi-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"
           
           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"
