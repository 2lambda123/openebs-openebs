#k8s-jenkins-upgrade.yml
# Description: Deploy Jenkins application using OpenEBS volume.
# Created jobs and builds inside mounted path and role upgrade pods.
# Check for jobs and build after Upgrade.

###############################################################################################
#Test Steps:

#1.Check whether the OpenEBS components are deployed.
#2.Deployed jenkins application pod with any version (Here version=2.124).
#3.Download the test artifacts to k8s master.(jenkins-cli.war , change_onfig.sh, config.xml file for job creation).
#4.Run the Script file in order to get required changes inside application pod and restart the pod for save change.
#5.Created sample job and build it.
#6.Upgraded application pod with newer version(here version=2.125).
#7.Downloading jenkins-cli.jar file inside var/jenkins_home mounted path of jenkins application creation and building of jobs.
#8.Perform build operation with the existing created job.
#9.Compare both the jobs build.
#(Way to Check for data persitency inside application pod.)

###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-jenkins-pod-vars.yml
 
  tasks:

   - block:

     - include: k8s-jenkins-pod-prereq.yml

     - name: 1)  Check whether maya-apiserver is deployed
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ operator_ns }}"
          app: apiserver

      
     - name: 2)  Download YAML for jenkins 
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/get_url.yml"
       vars:
         url: "{{ jenkins_link }}"
         dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"


     - name: 2a) Replace jenkins pod version
       replace:
         path: "{{ result_kube_home.stdout }}/jenkins.yml"
         regexp: "{{ver_lts}}"
         replace: "{{ver_2_124}}"
       delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
    
     - name: Create namespace for deployment.
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/namespace_task.yml"
       vars:
          status: create
          ns: "{{ namespace }}" 

      
     - name: 3) Deploy jenkins pod 
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
       vars:
          app_yml: "{{ pod_yaml_alias }}"
          ns: "{{ namespace }}"
    
     - name: 3a) Confirm pod status is running
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ namespace }}"
          app: jenkins

     - name: 3b) Verify that the jenkins is a cluster service
       shell: source ~/.profile; kubectl get svc -n {{namespace}}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: result_service
       failed_when: "'jenkins-svc' not in result_service.stdout"

     - name: 3c) Get the name of the pod.
       shell: source ~/.profile; kubectl get pods -n {{namespace}} | grep jenkins | awk {'print $1'}
       args: 
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: jenkins_pod_name


     

     - name: 4) Download Jenkins-cli.jar file inside /var/jenkins_home of pod.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{namespace}} 
          -- wget -P /var/jenkins_home http://localhost:8080/jnlpJars/jenkins-cli.jar
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: result
       delay: 30
       until: result.rc == 0


     - name: 4a)  Copy job configuration files to master.
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/copy_task.yml"
       vars:
         destination_node: "{{groups['kubernetes-kubemasters'].0}}"
         files_to_copy: "{{ job_config_files }}"

     - name: 4b) Copy job configuration files to jenkins-pod from master.
       shell: |
         source ~/.profile; kubectl cp {{result_kube_home.stdout}}/{{item}}  {{namespace}}/{{ jenkins_pod_name.stdout }}:/var/jenkins_home/   
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}" 
       with_items: "{{ job_config_files }}"
   
     - name: 5) Run the config_change.sh file for required changes inside pod.
       shell: > 
          source ~/.profile; kubectl exec {{  jenkins_pod_name.stdout }} -n {{namespace}} -- bash -c "sh /var/jenkins_home/config_change.sh"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: 5a)  Retrieve Password of jenkins running pods.
       shell: >
          source ~/.profile; kubectl exec  {{ jenkins_pod_name.stdout }} -n {{namespace}}
          -- bash -c "cat /var/jenkins_home/secrets/initialAdminPassword"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: jenkins_password
  
     - name: 5b) Restart the jenkins pod for running jenkins actions.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }} 
          -- java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 restart
          --username admin --password {{ jenkins_password.stdout }}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name:  Confirm pod status is running
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ namespace }}"
          app: jenkins    

     - name: wait for some time to jenkins save changes.
       wait_for:
           timeout: 60

 
     - name: 6)  Create and Build one sample job inside pod.
       shell: >
         source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }} 
         -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 create-job sample < /var/jenkins_home/template.xml";
         source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace  }} 
         -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 build sample" 
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
    
     - name: 6a)  Running a build job
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 console sample"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}" 
       register: First_Build
  
     - name: 7)  Replace jenkins pod version
       replace:
         path: "{{ result_kube_home.stdout }}/jenkins.yml"
         regexp: "{{ver_2_124}}"
         replace: "{{ver_2_125}}"
       delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


     - name: 7a)  Deploy jenkins pod Again
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
       vars:
          app_yml: "{{ pod_yaml_alias }}"
          ns: "{{ namespace }}"

     - name: 7b)  Confirm pod status is running
       include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{namespace}}"
          app: jenkins     
       
     - name: 7c)  Verify that the jenkins is a cluster service
       shell: source ~/.profile; kubectl get svc -n {{ namespace }}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: result_service_2
       failed_when: "'jenkins-svc' not in result_service.stdout"

     - name: 8) Get the name of the pod.
       shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep jenkins | awk {'print $1'}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: jenkins_pod_name_2

     - name: Verify jenkins-version post upgrade.
       shell: source ~/.profile; kubectl describe pod {{jenkins_pod_name_2.stdout }} -n {{ namespace }}  | grep Image | awk {'print $2'} 
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: version
       failed_when: "'jenkins/jenkins:2.125' not in version.stdout"
       
         
     - name: 8b) Create a new build from existing  job inside pod.
       shell: > 
          source ~/.profie; kubectl exec  {{ jenkins_pod_name_2.stdout }} -n {{ namespace }} 
          -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 console sample"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: Second_Build
 
     - name: Compare between two builds
       set_fact:
         flag: "Test Passed"
       when: "'Hello World!' in Second_Build.stdout"

     - name: Set Status
       set_fact:
         status: "good"
    
     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"

       - name: Set Status
         set_fact:
           status: "danger"

     always:
       - block:

           - include: k8s-jenkins-pod-upgrade-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/stern_task.yml"
             vars:
               status: stop
 
           - include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{ cflag }}'
               color: "{{status}}"
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')
 
