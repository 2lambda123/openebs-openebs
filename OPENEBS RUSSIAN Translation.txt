OpenEBS-это наиболее широко развернутое и простое в использовании решение для хранения данных с открытым исходным кодом для Kubernetes.

OpenEBS-это ведущий пример с открытым исходным кодом категории решений для хранения данных, иногда называемых контейнерными хранилищами. OpenEBS указан в качестве примера с открытым исходным кодом в Белой книге CNCF Storage Landscape в разделе гиперконвергентные решения для хранения данных.

Некоторые ключевые аспекты, которые делают OpenEBS отличным от других традиционных решений для хранения данных:

Построенный с использованием архитектуры микроуслуг, как и приложения, которые он обслуживает. OpenEBS сам по себе развертывается как набор контейнеров на рабочих узлах Kubernetes. Использует сам Kubernetes для оркестровки и управления компонентами OpenEBS
Полностью встроенный в пользовательское пространство, что делает его очень портативным для работы на любой ОС/платформе
Полностью управляемый намерениями, наследующий те же принципы, которые управляют простотой использования с Kubernetes
OpenEBS поддерживает целый ряд механизмов хранения данных, так что разработчики могут развертывать технологию хранения данных, соответствующую их целям разработки приложений. Распределенные приложения, такие как Cassandra, могут использовать движок LocalPV для записи с наименьшей задержкой. Монолитные приложения, такие как MySQL и PostgreSQL, могут использовать механизм ZFS (cStor) для обеспечения устойчивости. Потоковые приложения, такие как Кафка можете использовать встроенный Mayastor двигателя для лучшей производительности в современную обстановку. Во всех типах движков OpenEBS обеспечивает согласованную структуру для высокой доступности, моментальных снимков, клонов и управляемости.
Сама OpenEBS развертывается как просто еще один контейнер на вашем Хосте и включает службы хранения, которые могут быть назначены на уровне каждого модуля, приложения, кластера или контейнера, включая:

Автоматизируйте Управление хранилищем, подключенным к рабочим узлам Kubernetes, и разрешите использовать это хранилище для динамической подготовки OpenEBS PVs или локальных PVs.
Например, сохранение данных между узлами, что значительно сокращает время, затрачиваемое на перестройку колец Кассандры.
Например, синхронизация данных между зонами доступности и облачными провайдерами повышает доступность и сокращает время подключения/отсоединения.
Таким образом, независимо от того, работаете ли вы на AKS, или на вашем голом металле, или на GKE, или на AWS - ваш опыт подключения и разработчика для служб хранения данных максимально схож.
Управление многоуровневым доступом к S3 и другим целям.
Дополнительным преимуществом полностью нативного решения Kubernetes является то, что администраторы и разработчики могут взаимодействовать и управлять OpenEBS, используя все замечательные инструменты, доступные для Kubernetes, такие как kubectl, Helm, Prometheus, Grafana, Weave Scope и т. д.

Наша концепция проста: пусть хранение и сервисы хранения для постоянных рабочих нагрузок будут полностью интегрированы в среду, чтобы каждая команда и рабочая нагрузка извлекали выгоду из детализации управления и собственного поведения Kubernetes.

Масштабируемость
OpenEBS может масштабироваться, чтобы включать в себя произвольно большое количество контейнерных контроллеров хранения. Kubernetes используется для обеспечения фундаментальных частей, таких как использование etcd для инвентаризации. OpenEBS масштабируется в той же степени, что и ваш Kubernetes.

Установка и начало работы
OpenEBS можно настроить в несколько простых шагов. Вы можете приступить к выбору кластера Kubernetes, установив open-iscsi на узлах Kubernetes и запустив openebs-оператор с помощью kubectl.

Запустите сервисы OpenEBS с помощью оператора

# примените этот yaml
kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml
Запустите службы OpenEBS с помощью helm

обновление руля РЕПО
руля установить --пространство --openebs openebs название стабильный/openebs
Вы также можете следовать нашему краткому руководству.

OpenEBS можно развернуть на любом кластере Kubernetes - либо в облаке, либо на локальном компьютере, либо на ноутбуке разработчика (minikube). Обратите внимание, что нет никаких изменений в базовом ядре, которые необходимы, поскольку OpenEBS работает в пользовательском пространстве. Пожалуйста, следуйте нашей документации по установке OpenEBS. Кроме того, у нас есть доступная среда Vagrant, которая включает в себя образец развертывания Kubernetes и синтетическую нагрузку, которую вы можете использовать для имитации производительности OpenEBS. Вы также можете найти интересным связанный с этим проект под названием лакмусовая бумажка (https://litmuschaos.ввода-вывода), которая помогает с хаосом техники для рабочих нагрузок с учетом состояния на Kubernetes.

Статус
OpenEBS-это одна из наиболее широко используемых и протестированных инфраструктур хранения данных Kubernetes в отрасли. Проект песочницы CNCF с мая 2019 года OpenEBS является первой и единственной системой хранения данных, обеспечивающей согласованный набор программно-определяемых возможностей хранения данных на нескольких бэкэндах (local, nfs, zfs, nvme) как в локальных, так и в облачных системах, и первой открыла свой собственный хаос инженерной платформы для статусных рабочих нагрузок, лакмусовый проект, на который сообщество полагается для автоматической оценки готовности ежемесячной каденции версий OpenEBS. Корпоративные клиенты используют OpenEBS в производстве с 2018 года, и проект поддерживает 2,5 млн+ docker тянет в неделю.

Ниже приводится состояние различных механизмов хранения, которые питают постоянные Тома OpenEBS. Основные различия между статусами суммируются ниже:

Альфа: API может измениться несовместимым образом в более позднем выпуске программного обеспечения без предварительного уведомления, рекомендуется использовать только в недолговечных тестовых кластерах из-за повышенного риска ошибок и отсутствия долгосрочной поддержки.
бета-версия: поддержка общих функций не будет удалена, хотя детали могут измениться. Поддержка обновления или миграции между версиями будет обеспечиваться либо с помощью автоматизации, либо вручную.
стабильность: функции появятся в выпущенном программном обеспечении для многих последующих версий, а поддержка обновления между версиями будет обеспечиваться автоматизацией программного обеспечения в подавляющем большинстве сценариев.
Сведения О Состоянии Двигателя Хранения
Jiva stable лучше всего подходит для запуска Реплицированного блочного хранилища на узлах, использующих эфемерное хранилище на рабочих узлах Kubernetes
cStor beta-предпочтительный вариант для работы на узлах, имеющих блочные устройства. Рекомендуемый вариант, если требуется моментальный снимок и клоны
Локальные Тома бета - версии лучше всего подходят для распределенных приложений, которым требуется хранилище с низкой задержкой-хранилище с прямым подключением от узлов Kubernetes.
Mayastor alpha - это новый механизм хранения данных, который работает с эффективностью локального хранилища, но также предлагает такие услуги хранения данных, как репликация. Ведется разработка для поддержки моментальных снимков и клонов.
Для получения более подробной информации, пожалуйста, обратитесь к документации OpenEBS.

Способствующий
OpenEBS приветствует ваши отзывы и вклады в любой возможной форме.

Присоединяйтесь к сообществу OpenEBS на Kubernetes Slack
Уже записался? Отправляйтесь на наши обсуждения в #openebs
Хотите поднять проблему или помочь с исправлениями и функциями?
См. раздел открытые проблемы
См. руководство по внесению вклада
Хотите присоединиться к нашим собраниям сообщества вкладчиков, проверьте это.
Присоединяйтесь к нашим спискам рассылки OpenEBS CNCF
Для получения обновлений проекта OpenEBS подпишитесь на объявления OpenEBS
Для взаимодействия с другими пользователями OpenEBS подпишитесь на пользователей OpenEBS
Покажи мне код
Это мета-репозиторий для OpenEBS. Пожалуйста, начните с закрепленных репозиториев или с документа архитектуры OpenEBS.
