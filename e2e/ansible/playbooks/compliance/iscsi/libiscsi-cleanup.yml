---
- name: Obtaining PV name
  shell: kubectl get pvc -n {{ namespace }} --no-headers -o custom-columns=:metadata.name
  args:
    executable: /bin/bash
  register: pv
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

- include_tasks: "{{utils_path}}/delete_deploy.yml"
  vars:
    ns: "{{ namespace }}"
    app_yml: "{{ volume_def }}"
   
- name: Confirm whether the pods are deleted.
  shell: source ~/.profile; kubectl get pods -n {{ namespace }}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  until: "pv.stdout not in result.stdout"
  delay: 30
  retries: 10
  when:  storage_engine  == 'jiva'

- name: Confirm if the target pod is deleted
  shell: source ~/.profile; kubectl get pods -n {{ operator_ns }} | grep {{ namespace }}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  until: "pv.stdout not in result.stdout"
  delay: 30
  retries: 10
  when: storage_engine == 'cStor'

- name: Remove test artifacts
  file:
    path: "{{ result_kube_home.stdout }}/{{ item }}"
    state: absent
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  with_items:
    - "{{volume_def}}"

- name: Remove test artifacts
  file:
    path: /tmp/{{ item }}
    state: absent
  delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
  with_items:
    - "{{test_list}}"
