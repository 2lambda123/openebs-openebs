# test-single-replica-failure.yml
# Author: UdayKiran
# Description: Single replica failure test.

###############################################################################################
#Test Steps:
#1. Copy Test artifacts to Kubemaster.
#2. Deploy Percona application with liveness probe running db queries continuously.
#3. Setup ChaosKube infrastructure.
#4. Gather Node,Replica Container details required for test.
#5. Initiate single replica failure using ChaosKube.
#6. Check percona application status to veriy openebs controller can sustain failures.
#7. Perform cleanup of test artifacts.
###############################################################################################
- hosts: localhost

  vars_files:
    - test-single-replica-failure-vars.yml

  tasks:
   - block:

       - include: test-single-replica-failure-prereq.yml

       ###################################################
       #                PREPARE FOR TEST                 #
       # (Place artifacts in kubemaster, start logger &  #
       # confirm OpenEBS operator is ready for requests. #
       ###################################################

       - name: Copy the chaoskube specs to kubemaster
         include_tasks: "{{utils_path}}/copy_task.yml"
         vars:
           destination_node: "{{groups['kubernetes-kubemasters'].0}}"
           files_to_copy:
             - "{{ chaoskube_files }}"
             - "{{ percona_files }}"

       - name: Copy SC template to master
         template:
           src: single-replica-sc.j2
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace volume-claim name with test parameters
         include_tasks: "{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/percona.yaml"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"

       - name: Replace volume-claim name with test parameters
         replace:
           path: "{{ result_kube_home.stdout }}/rbac.yaml"
           regexp: 'namespace: default'
           replace: 'namespace: {{ namespace }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Check status of maya-api server
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ operator_ns }}"
            lkey: name
            lvalue: maya-apiserver

       - name: Create test specific storage class
         shell: source ~/.profile; kubectl apply -f '{{ result_kube_home.stdout }}/single-replica-sc.j2'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Create test specific namespace
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
            status: create
            ns: "{{ namespace }}"

       ####################################################
       #          SETUP FAULT-INJECTION ENV               #
       # (Setup chaoskube deployment with an empty policy,#
       # deploy percona w/ a liveness check for DB writes)#
       ####################################################

       - include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ chaoskube_files }}"
           ns: "{{ namespace }}"

       - name: Check whether chaoskube infrastructure is created
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            lkey: app
            lvalue: chaoskube

       - name: Set chaoskube pod name to variable
         set_fact:
           chaospod: "{{ result.stdout_lines[1].split()[0] }}"

       - name: Create a configmap with the liveness sql script
         shell: source ~/.profile; kubectl create configmap sqltest --from-file={{ percona_files.1 }} -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'configmap' and 'created' not in result.stdout"

       - name: Create percona deployment with OpenEBS storage
         include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ percona_files.0 }}"
           ns: "{{ namespace }}"

       - name: Check whether percona application is running
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            lkey: name
            lvalue: percona

       - name: Wait for 120s to ensure liveness check starts
         wait_for:
           timeout: 120

       - name: Get the name of the volume single replica deployment
         shell: >
           source ~/.profile; kubectl get deployments -n {{ namespace }}
           -l openebs.io/replica=jiva-replica --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_deploy

       - name: Set the replica deployment name to variable
         set_fact:
           replica_deploy: "{{ result_deploy.stdout_lines[0].split()[0] }}"

       - name: Get the name of the single replica pod to a variable
         shell: >
           source ~/.profile; kubectl get pods -n {{ namespace }}
           -l openebs.io/replica=jiva-replica --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_pod

       - name: Set the replica pod name to variable
         set_fact:
           replica_pod: "{{ result_pod.stdout_lines[0].split()[0] }}"

       - name: Get the name of the node the single replica pod is deployed
         shell: >
           source ~/.profile; kubectl describe pod {{ replica_pod }} -n {{ namespace }} | grep "Node:" | awk '{print $2}' | cut -d '/' -f1
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_node

       - name: Get the names of the nodes to be cordoned
         shell: >
           source ~/.profile;
           kubectl get nodes --no-headers | grep -v {{ result_node.stdout }} | awk '{print $1}'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_nodes

       - name: Cordon the nodes
         shell: >
           source ~/.profile; kubectl cordon {{ item }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         with_items: "{{ result_nodes.stdout_lines }}"

       ########################################################
       #        INJECT FAULTS FOR SPECIFIED PERIOD            #
       # (Obtain begin marker before fault-inject(FI),do ctrl #
       # failures, verify successful FI via end marker)       #
       ########################################################

       - name: Get the resourceVersion of the replica deployment
         shell: >
           source ~/.profile; kubectl get deploy -n {{ namespace }}
           {{ replica_deploy }} -o yaml | grep resourceVersion
           | awk '{print $2}' | sed 's|"||g'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: rv_bef

       - name: Initiate periodic replica failures from chaoskube
         shell: >
           source ~/.profile; kubectl exec {{ chaospod }} -n {{ namespace }}
           -- timeout -t {{ chaos_duration }} chaoskube
           --labels 'openebs.io/replica=jiva-replica'
           --no-dry-run --interval={{ chaos_interval }}s
           --debug
           --namespaces={{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: chaos_result
         ignore_errors: true

       - name: Get the resourceVersion of the replica deployment
         shell: >
           source ~/.profile; kubectl get deploy -n {{ namespace }}
           {{ replica_deploy }} -o yaml | grep resourceVersion
           | awk '{print $2}' | sed 's|"||g'
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: rv_aft

       - name: Compare resourceVersions of replica deployments
         debug:
           msg: "Verified replica pods were restarted by chaoskube"
         failed_when: "rv_bef.stdout | int == rv_aft.stdout | int"

       ########################################################
       #        VERIFY RESILINCY/FAULT-TOLERATION             #
       # (Confirm liveness checks on percona are successful & #
       # pod is still in running state)                       #
       ########################################################

       - name: Confirm percona pod is still running
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            lkey: name
            lvalue: percona

       ########################################################
       #                        CLEANUP                       #
       # (Tear down application, liveness configmap as well as#
       # the FI (chaoskube) infrastructure. Also stop logger) #
       ########################################################

       - name: Setting pass flag
         set_fact:
           flag: "Test Passed"
           status: "good"
           status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
       - block:

           - include: test-single-replica-failure-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - name: Uncordon the nodes
             shell: >
               source ~/.profile; kubectl uncordon {{ item }}
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
             with_items: "{{ result_nodes.stdout_lines }}"

           - name: Check if the nodes are uncordoned
             shell: >
               source ~/.profile; kubectl get nodes
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
             register: result
             failed_when: "'SchedulingDisabled' in result.stdout"

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"
