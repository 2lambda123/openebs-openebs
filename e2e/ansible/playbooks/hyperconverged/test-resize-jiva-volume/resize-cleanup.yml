---
- name: Getting PV name from the pvc
  shell: source ~/.profile; kubectl get pvc {{ claim_name }} -n "{{ namespace }}" -o custom-columns=:spec.volumeName --no-headers
  args:
    executable: /bin/bash
  register: pv
  delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

- name: Deleting percona deployment
  shell: source ~/.profile; kubectl delete -f "{{ percona_def }}" -n "{{ namespace }}"
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

- name: Checking if the application pod is deleted.
  shell: source ~/.profile; kubectl get pods --all-namespaces --show-labels | grep {{ app_label }} | awk {'print $2'} | wc -l
  args:
    executable: /bin/bash
  register: app_count
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  until: app_count.stdout |int == 0
  delay: 20
  retries: 15

- name: Confirm PVC pod has been deleted
  shell: source ~/.profile; kubectl get pods -n {{namespace}}
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: result
  until: "pv.stdout not in result.stdout"
  delay: 30
  retries: 10
  changed_when: True

- name: Checking if the corresponding svc is deleted
  shell: source ~/.profile; kubectl get svc -n "{{ namespace }}" | grep {{ pv.stdout }} | wc -l
  args:
    executable: /bin/bash
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
  register: svc_count
  until: svc_count.stdout |int == 0
  delay: 20
  retries: 15

- name: Delete the percona definition yaml file copied
  file:
    path: "{{ percona_def }}"
    state: absent
  delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


